### 模拟

在矩阵`matrix`的幸运数满足：

* 在同一行的所有元素中最小。
* 在同一列的所有元素中最大。

而行的范围在`[1,50]`，列的范围在`[1,50]`，所以直接模拟即可。
最外层循环遍历行，使用`min`记录行最小值，使用`min_idx`记录行最小值所在索引，内层第一个循环记录行最小值及其索引。
之后使用`max`记录列最大值，内层第二个循环记录在行最小值索引位置那一列的列最大值，最后判断`min`与`max`是否一致：一致说明是备选数字，加入结果集`ret`，最终返回即可。

![Screen Shot 2022-02-15 at 09.18.16.png](https://pic.leetcode-cn.com/1644888449-qOrOEQ-Screen%20Shot%202022-02-15%20at%2009.18.16.png)

![Screen Shot 2022-02-15 at 09.12.43.png](https://pic.leetcode-cn.com/1644888463-sRXccB-Screen%20Shot%202022-02-15%20at%2009.12.43.png)

![Screen Shot 2022-02-15 at 09.13.01.png](https://pic.leetcode-cn.com/1644888457-QQCvNp-Screen%20Shot%202022-02-15%20at%2009.13.01.png)

### 代码

* []

```Rust
impl Solution {
    pub fn lucky_numbers(matrix: Vec<Vec<i32>>) -> Vec<i32> {
        let mut ret = Vec::new();
        let (m, n) = (matrix.len(), matrix[0].len());
        for i in 0..m {
            let mut min = matrix[i][0];
            let mut min_idx = 0;
            for j in 1..n {
                if min > matrix[i][j] {
                    min = matrix[i][j];
                    min_idx = j;
                }
            }
            let mut max = min;
            for j in 0..m { max = max.max(matrix[j][min_idx]); }
            if min == max { ret.push(max); }
        }
        ret
    }
}
```

* []

```Go
func luckyNumbers(matrix [][]int) (ret []int) {
	m, n := len(matrix), len(matrix[0])
	for i := 0; i < m; i++ {
		min, minIdx := matrix[i][0], 0
		for j := 1; j < n; j++ {
			if min > matrix[i][j] {
				min, minIdx = matrix[i][j], j
			}
		}

		max := min
		for j := 0; j < m; j++ {
			if max < matrix[j][minIdx] {
				max = matrix[j][minIdx]
			}
		}
		if max == min {
			ret = append(ret, max)
		}
	}
	return
}
```

* []

```Java
class Solution {
    public List<Integer> luckyNumbers (int[][] matrix) {
        List<Integer> ret = new ArrayList<>();
        int m = matrix.length, n = matrix[0].length;
        for (int i = 0; i < m; i++) {
            int min = matrix[i][0], minIdx = 0;
            for (int j = 1; j < n; j++) {
                if (min > matrix[i][j]) {
                    min = matrix[i][j];
                    minIdx = j;
                }
            }
            int max = min;
            for (int j = 0; j < m; j++) {
                max = Math.max(max, matrix[j][minIdx]);
            }
            if (min == max) {
                ret.add(max);
            }
        }
        return ret;
    }
}
```

