## 状态机 DP

为了方便，我们记 `costs` 为 `cs`。

根据题意，当我们从前往后决策每间房子的颜色时，当前房子所能刷的颜色，取决于上一间房子的颜色。

我们可以定义 $f[i][j]$ 为考虑下标不超过 $i$ 的房子，且最后一间房子颜色为 $j$ 时的最小成本。

起始我们有 $f[0][i] = cs[0][i]$，代表只有第一间房子时，对应成本为第一间房子的上色成本。

然后不失一般性考虑，$f[i][j]$ 该如何计算：$f[i][j]$ 为所有 $f[i - 1][prev]$（其中 $prev \neq j$）中的最小值加上 $cs[i][j]$。

本质上这是一道「状态机 DP」问题：某些状态只能由规则限定的状态所转移，通常我们可以从 $f[i][j]$ 能够更新哪些目标状态（后继状态）进行转移，也能够从 $f[i][j]$ 依赖哪些前置状态（前驱状态）来转移。

一些细节：考虑到我们 $f[i][X]$ 的计算只依赖于 $f[i - 1][X]$，因此我们可以使用三个变量来代替我们的动规数组。

代码：

* []

```Java
class Solution {
    public int minCost(int[][] cs) {
        int n = cs.length;
        int a = cs[0][0], b = cs[0][1], c = cs[0][2];
        for (int i = 1; i < n; i++) {
            int d = Math.min(b, c) + cs[i][0];
            int e = Math.min(a, c) + cs[i][1];
            int f = Math.min(a, b) + cs[i][2];
            a = d; b = e; c = f;
        }
        return Math.min(a, Math.min(b, c));
    }
}
```

* []

```Java
class Solution {
    public int minCost(int[][] cs) {
        int n = cs.length;
        int a = cs[0][0], b = cs[0][1], c = cs[0][2];
        for (int i = 0; i < n - 1; i++) {
            int d = Math.min(b, c) + cs[i + 1][0];
            int e = Math.min(a, c) + cs[i + 1][1];
            int f = Math.min(a, b) + cs[i + 1][2];
            a = d; b = e; c = f;
        }
        return Math.min(a, Math.min(b, c));
    }
}
```

* 时间复杂度：$O(n \times C)$，其中 $C = 3$ 为颜色数量
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
