## BFS

使用 `BFS` 进行「层序遍历」，每次用当前层的首个节点来更新 `ans`，当 `BFS` 结束后，`ans` 存储的是最后一层最靠左的节点。

代码：

* []

```Java
class Solution {
    public int findBottomLeftValue(TreeNode root) {
        Deque<TreeNode> d = new ArrayDeque<>();
        d.addLast(root);
        int ans = 0;
        while (!d.isEmpty()) {
            int sz = d.size();
            ans = d.peek().val;
            while (sz-- > 0) {
                TreeNode poll = d.pollFirst();
                if (poll.left != null) d.addLast(poll.left);
                if (poll.right != null) d.addLast(poll.right);
            }
        }
        return ans;
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：最坏情况下所有节点都在同一层，复杂度为 $O(n)$

---

## DFS

同理，可以使用 `DFS`  进行树的遍历，每次优先 `DFS` 当前节点的左子树，每次第一次搜索到当前深度 `depth` 时，必然是当前深度的最左节点，此时用当前节点值来更新 `ans`。

代码：

* []

```Java
class Solution {
    int max, ans;
    public int findBottomLeftValue(TreeNode root) {
        dfs(root, 1);
        return ans;
    }
    void dfs(TreeNode root, int depth) {
        if (root == null) return ;
        if (depth > max) {
            max = depth; ans = root.val;
        }
        dfs(root.left, depth + 1);
        dfs(root.right, depth + 1);
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：最坏情况下退化成链，递归深度为 $n$。复杂度为 $O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
