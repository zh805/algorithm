## 哈希表

一个简单的想法是先使用「哈希表」进行计数。

对于每个 $x = nums[i]$ 而言，根据 $k$ 是否为 $0$ 进行分情况讨论：

* $k$ 为 $0$：此时只能 $(x, x)$ 组成数对，此时判断 $nums[i]$ 出现次数是否大于 $1$ 次，若满足则进行计数加一；
* $k$ 不为 $0$：此时 $x$ 能够与 $a = x - k$ 或 $b = x + k$ 组成数对，分别查询 $a$ 和 $b$ 是否出现过，若出现过则进行计数加一。

为了防止相同的 $x$ 进行重复计数，我们需要统计完 $x$ 后，清空其出现次数。

代码：

* []

```Java
class Solution {
    public int findPairs(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : nums) map.put(i, map.getOrDefault(i, 0) + 1);
        int ans = 0;
        for (int i : nums) {
            if (map.get(i) == 0) continue;
            if (k == 0) {
                if (map.get(i) > 1) ans++;
            } else {
                int a = i - k, b = i + k;
                if (map.getOrDefault(a, 0) > 0) ans++;
                if (map.getOrDefault(b, 0) > 0) ans++;
            }
            map.put(i, 0);
        }
        return ans;
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 离散化 + 二分

我们知道可以使用「数组」充当「哈希表」来减少常数，但由于 $nums[i]$ 的值域大小为 $2 \times 10^7$，可能会有 `MLE` 风险。

我们需要对 $nums$ 进行离散化，预处理出一个去重且有序的数组 `list`。

在统计答案时，我们不再需要在 `nums` 基础上统计，而可以直接在去重数组 `list` 上进行统计，同时将对「数值」的统计操作转换为对「下标」的统计操作。

代码：

* []

```Java
class Solution {
    static int[] cnt = new int[10010];
    List<Integer> list;
    int find(int x) {
        int n = list.size(), l = 0, r = n - 1;
        while (l < r) {
            int mid = l + r >> 1;
            if (list.get(mid) >= x) r = mid;
            else l = mid + 1;
        }
        return list.get(r) == x ? r : -1;
    }
    public int findPairs(int[] nums, int k) {
        Arrays.sort(nums);
        list = new ArrayList<>();
        for (int i : nums) {
            if (list.isEmpty() || i != list.get(list.size() - 1)) list.add(i);
        }
        Arrays.fill(cnt, 0);
        for (int i : nums) cnt[find(i)]++;
        int ans = 0, idx = 0;
        for (int i : list) {
            if (k == 0) {
                if (cnt[idx] > 1) ans++;
            } else {
                int a = find(i - k), b = find(i + k);
                if (a != -1 && cnt[a] > 0) ans++;
                if (b != -1 && cnt[b] > 0) ans++;
            }
            cnt[idx++] = 0;
        }
        return ans;
    }
}
```

* 时间复杂度：排序离散化复杂度为 $O(n\log{n})$，统计答案复杂度为 $O(n\log{n})$。整体复杂度为 $O(n\log{n})$
* 空间复杂度：$O(n)$

---

## 离散化 + 双指针

跟进一步的，对于 $x = nums[i]$ 而言，我们每次都在整段的 `list` 中二分找 $a = nums[i] - k$ 和 $b = nums[i] + k$ 的下标，导致我们统计 $nums[i]$ 对答案的贡献时复杂度为 $O(\log{n})$，统计所有 $nums[i]$ 对答案的贡献为 $O(n\log{n})$。

实际上，利用 `list` 本身的有序性，我们在从前往后处理每个 $nums[idx]$ 时，对应的 $a$ 和 $b$ 也必然是逐步增大，因此我们可以使用「双指针」来避免「二分」操作，使得统计所有 $nums[i]$ 对答案贡献的复杂度从 $O(n\log{n})$ 下降到 $O(n)$。

代码：

* []

```Java
class Solution {
    static int[] cnt = new int[10010];
    public int findPairs(int[] nums, int k) {
        Arrays.sort(nums);
        List<Integer> list = new ArrayList<>();
        for (int i : nums) {
            if (list.isEmpty() || i != list.get(list.size() - 1)) list.add(i);
        }
        Arrays.fill(cnt, 0);
        for (int i = 0, j = 0; i < nums.length; i++) {
            if (nums[i] != list.get(j)) j++;
            cnt[j]++;
        }
        int n = list.size(), idx = 0, ans = 0, l = 0, r = 0;
        for (int i : list) {
            if (k == 0) {
                if (cnt[idx] > 1) ans++;
            } else {
                int a = i - k, b = i + k;
                while (l < n && list.get(l) < a) l++;
                while (r < n && list.get(r) < b) r++;
                if (l < n && list.get(l) == a && cnt[l] > 0) ans++;
                if (r < n && list.get(r) == b && cnt[r] > 0) ans++;
            }
            cnt[idx++] = 0;
        }
        return ans;
    }
}
```

* 时间复杂度：排序离散化复杂度为 $O(n\log{n})$，统计答案复杂度为 $O(n)$，整体复杂度为 $O(n\log{n})$
* 空间复杂度：$O(n)$

---

## 致谢

**贴一个昨天拍的全家福 📷 再次感谢大家的包容和支持 ❤️**

![WechatIMG2431.jpeg](https://pic.leetcode-cn.com/1655345342-Ugbnxv-WechatIMG2431.jpeg)
![WechatIMG2432.jpeg](https://pic.leetcode-cn.com/1655345342-pCsAyT-WechatIMG2432.jpeg)
