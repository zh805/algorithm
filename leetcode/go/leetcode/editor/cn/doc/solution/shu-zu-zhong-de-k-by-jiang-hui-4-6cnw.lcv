# 方法一：哈希表

我们可以维护两个哈希表，然后依次遍历数组中的元素，查找是否包含`num - k`和`num + k`,每个数对的x作为唯一标识存放到`hashset`中，最后返回`set`的大小即可。
**代码如下**

* 

```
public int findPairs(int[] nums, int k) {
    //直接开1e4的空间，减少hash表扩容的时间
    Set<Integer> numSet = new HashSet<>((int) 1e4);
    //用set去重
    Set<Integer> ans = new HashSet<>((int) 1e4);
    //只存放数对(x,y)中的x即可
    for (int num : nums) {
        if (numSet.contains(num - k)) {
            ans.add(num - k);
        }
        if (numSet.contains(num + k)) {
            ans.add(num);
        }
        numSet.add(num);
    }
    return ans.size();
}
```

**复杂度分析**
时间复杂度:O(n)
空间复杂度:O(n)

# 方法二：排序+二分查找

我们可以对数组进行排序后遍历找其k-diff数对
设当前位置为`i`，由于数组有序，我们只需要从左到右遍历，在`[i+1,n-1]`的范围内二分查找`num[i] + k`是否存在即可
比如k=2，则我们遍历1时，会找到3，遍历3时，会找到5，此时(1,3)和(3,5)均被找到，不用担心找不到(nums[i] - k,nums[i])
![image.png](https://pic.leetcode-cn.com/1655335903-gGyRTi-image.png)
**代码如下**

* 

```
public int findPairs(int[] nums, int k) {
    int n = nums.length, res = 0;
    Arrays.sort(nums);
    for (int i = 0; i < n - 1; i++) {
        //重复的不计算，如果相同nums[i-1]已经计算过了
        if (i > 0 && nums[i] == nums[i - 1]) {
            continue;
        }
        int target = nums[i] + k;
        //在[i+1,n-1]中找target
        int left = i + 1, right = n - 1;
        int ans = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] >= target) {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        //判断是否找到
        if (ans != -1 && nums[ans] == target) {
            res++;
        }
    }
    return res;
}
```

**复杂度分析**
时间复杂度：O(nlogn)，排序O(nlogn),遍历+二分O(nlogn),整体O(nlogn)
空间复杂度：O(logn)，排序所需的平均空间复杂度O(logn)

# 方法三：排序+双指针

我们可以维护两个指针`i`,`j`，并保证`i < j < n`，如果有`nums[j] = nums[i] + k`则计入答案
![image.png](https://pic.leetcode-cn.com/1655336418-hckNzx-image.png)
![image.png](https://pic.leetcode-cn.com/1655336191-YzaueY-image.png)
![image.png](https://pic.leetcode-cn.com/1655336203-mcjEJo-image.png)
![image.png](https://pic.leetcode-cn.com/1655336220-EsVaNF-image.png)
![image.png](https://pic.leetcode-cn.com/1655336239-maqqyS-image.png)
![image.png](https://pic.leetcode-cn.com/1655336248-DPFxMH-image.png)
**代码如下**

* 

```
public int findPairs(int[] nums, int k) {
    int n = nums.length, res = 0;
    Arrays.sort(nums);
    for (int i = 0, j = 0; i < n - 1 && j < n; i++) {
        //重复的不计算，如果相同nums[i-1]已经计算过了
        if (i > 0 && nums[i] == nums[i - 1]) {
            continue;
        }
        //需要j > i，有可能去重时导致i >= j
        while (j <= i) {
            j++;
        }
        //找到target 和方法二一样，只找nums[i] + k
        while (j < n && (nums[j] < nums[i] + k)) {
            j++;
        }
        //找到目标值
        if (j < n && nums[j] == nums[i] + k) {
            res++;
        }
    }
    return res;
}
```

**复杂度分析**
时间复杂度：O(nlogn)，排序O(nlogn),遍历O(n),i和j都最多移动n次，时间复杂度O(n),整体O(nlogn)
空间复杂度：O(logn)，排序所需的平均空间复杂度O(logn)
![image.png](https://pic.leetcode-cn.com/1655336363-ZqIkHQ-image.png)
如果对您有帮助，**记得关注 + 点赞 + 收藏呦！！！**
**每天都会更新每日一题题解，欢迎大家评论区指出错误，大家加油！！**

