# ‰Ω†ÈúÄË¶ÅÈááÁî®ÂâçÂ∫èÈÅçÂéÜÁöÑÊñπÂºèÔºåÂ∞Ü‰∏Ä‰∏™‰∫åÂèâÊ†ëËΩ¨Êç¢Êàê‰∏Ä‰∏™Áî±Êã¨Âè∑ÂíåÊï¥Êï∞ÁªÑÊàêÁöÑÂ≠óÁ¨¶‰∏≤„ÄÇ 
# 
#  Á©∫ËäÇÁÇπÂàôÁî®‰∏ÄÂØπÁ©∫Êã¨Âè∑ "()" Ë°®Á§∫„ÄÇËÄå‰∏î‰Ω†ÈúÄË¶ÅÁúÅÁï•ÊâÄÊúâ‰∏çÂΩ±ÂìçÂ≠óÁ¨¶‰∏≤‰∏éÂéüÂßã‰∫åÂèâÊ†ë‰πãÈó¥ÁöÑ‰∏ÄÂØπ‰∏ÄÊò†Â∞ÑÂÖ≥Á≥ªÁöÑÁ©∫Êã¨Âè∑ÂØπ„ÄÇ 
# 
#  Á§∫‰æã 1: 
# 
#  
# ËæìÂÖ•: ‰∫åÂèâÊ†ë: [1,2,3,4]
#        1
#      /   \
#     2     3
#    /    
#   4     
# 
# ËæìÂá∫: "1(2(4))(3)"
# 
# Ëß£Èáä: ÂéüÊú¨Â∞ÜÊòØ‚Äú1(2(4)())(3())‚ÄùÔºå
# Âú®‰Ω†ÁúÅÁï•ÊâÄÊúâ‰∏çÂøÖË¶ÅÁöÑÁ©∫Êã¨Âè∑ÂØπ‰πãÂêéÔºå
# ÂÆÉÂ∞ÜÊòØ‚Äú1(2(4))(3)‚Äù„ÄÇ
#  
# 
#  Á§∫‰æã 2: 
# 
#  
# ËæìÂÖ•: ‰∫åÂèâÊ†ë: [1,2,3,null,4]
#        1
#      /   \
#     2     3
#      \  
#       4 
# 
# ËæìÂá∫: "1(2()(4))(3)"
# 
# Ëß£Èáä: ÂíåÁ¨¨‰∏Ä‰∏™Á§∫‰æãÁõ∏‰ººÔºå
# Èô§‰∫ÜÊàë‰ª¨‰∏çËÉΩÁúÅÁï•Á¨¨‰∏Ä‰∏™ÂØπÊã¨Âè∑Êù•‰∏≠Êñ≠ËæìÂÖ•ÂíåËæìÂá∫‰πãÈó¥ÁöÑ‰∏ÄÂØπ‰∏ÄÊò†Â∞ÑÂÖ≥Á≥ª„ÄÇ
#  
#  üëç 271 üëé 0


# leetcode submit region begin(Prohibit modification and deletion)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    # def tree2str(self, root: Optional[TreeNode]) -> str:
    #     """
    #     ÊñπÊ≥ï1ÔºöÂâçÂ∫èÈÅçÂéÜÔºåÈÄíÂΩí„ÄÇ
    #     """
    #     res = []
    #
    #     def pre(root):
    #         if not root:
    #             return
    #         res.append(str(root.val))
    #
    #         if root.left and root.right:
    #             res.append('(')
    #             pre(root.left)
    #             res.append(')')
    #             res.append('(')
    #             pre(root.right)
    #             res.append(')')
    #
    #         elif root.left:
    #             res.append('(')
    #             pre(root.left)
    #             res.append(')')
    #
    #         elif root.right:
    #             res.append('()')
    #             res.append('(')
    #             pre(root.right)
    #             res.append(')')
    #         else:
    #             return
    #
    #     pre(root)
    #     # print(res)
    #     return ''.join(res)

    def tree2str(self, root: Optional[TreeNode]) -> str:
        """
        ÊñπÊ≥ï2ÔºöÈÅçÂéÜÔºåÊ†à
        """
        stack = [root]
        res = []
        while stack:
            node = stack.pop()
            if node == '(' or node == ')':
                res.append(node)
                continue
            res.append(str(node.val))

            if node.right and node.left:
                stack.extend([')', node.right, '('])
                stack.extend([')', node.left, '('])
            elif node.left:
                stack.extend([')', node.left, '('])
            elif node.right:
                stack.extend([')', node.right, '('])
                stack.extend([')', '('])

        return ''.join(res)

# leetcode submit region end(Prohibit modification and deletion)
