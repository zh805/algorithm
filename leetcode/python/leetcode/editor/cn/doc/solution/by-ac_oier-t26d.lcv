## 双向链表 + 哈希表

题目要求我们支持 $O(1)$ 的查询和修改，其中查询只需返回任意一个计数次数「最多」和「最少」的元素即可（如果有）。

虽然插入的字符串长度不超过 $10$（该数据范围的含义为字符串的哈希计算消耗可看作常数），但单纯的使用「哈希表」仅能做到 $O(1)$ 的计数，无法做到 $O(1)$ 查询。

**我们可以采取和 [LFUCache](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486856%26idx%3D1%26sn%3D59b2ed57e4a75eac0e63fc0cf08bed5d) 类似的思路，通过自定义节点并手写双链表来实现，还没「手写双向链表」的同学可以看前置 🧀 ：[实现一个 LRUCache（手写双向链表入门题）](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247490403%26idx%3D1%26sn%3Ddd361a87d74eec4ca9ef97efe016c906) 。**

定义一个节点类 `Node`，除了包含用于实现双向链表的 `left` 和 `right` 以外，还包含一个数值类型的变量 `val`， 用于记录该节点存储的是计数次数为多少的元素，以及一个 `Set` 类型的容器，用于支持 $O(1)$ 插入和删除元素，记作 `set`。

同时为了快速知道某个字符串属于哪个 `Node`，我们还需要开一个「哈希表」进行定位（以字符串为哈希表的键，字符串所在 `Node` 作为值），当定位到字符串对应的 `Node` 之后则可以利用「双向链表」的 $O(1)$  增加/修改/删除。

在双向链表中，起始只有两个哨兵节点 `hh` 和 `tt` ，当进行若干 `inc/dec` 操作后的基本形态为：

![image.png](https://pic.leetcode-cn.com/1647386842-kYgoaN-image.png)

对应几个操作：

`inc/dec` 操作：当对一个字符串 `key` 进行「增加计数」或「减少计数」时，先在哈希表中看 `key` 是否存在：

* 若存在：根据其所属的 `Node` 的计数 `cnt` 为多少，并结合当前是「增加计数」还是「减少计数」来决定是找 `Node` 的「右节点」还是「左节点」，同时检查相邻节点的计数值 `cnt` 是否为目标值，对应要检查数值是 $cnt + 1$ 和 $cnt - 1$：
  * 若相邻节点的 `cnt` 为目标值：即目标节点存在，将 `key` 从原 `Node` 的 `set` 集合中移除，并添加到目标节点的集合中，更新哈希表；
  * 若相邻节点的 `cnt` 不是目标值：则需要创建相应的目标节点，并构建双向链表关系，把 `key` 存入新创建的目标节点，更新哈希表。
* 若不存在（只能是 `inc` 操作）：查找是否存在 $cnt = 1$ 的节点（也就是检查 `hh.right` 节点的计数值）：
  * 如果存在 $cnt = 1$ 的目标节点：将 `key` 添加到目标节点的 `set` 集合中，更新哈希表；
  * 若不存在 $cnt = 1$ 的目标节点：创建相应的节点，并构建双向关系，并构建双向链表关系，把 `key` 存入新创建的目标节点，更新哈希表。

`getMaxKey/getMinKey` 操作：分别从 `tt.left` 和 `hh.right` 中尝试查找，如果存在非哨兵节点，则从节点的 `set` 集合中取任意元素进行返回，否则返回空串。

最后，为了确保 `getMaxKey/getMinKey` 操作能够严格 $O(1)$，我们在进行 `inc/dec` 操作时我们需要对一些 `set` 容量为 $0$ 的节点进行释放，即解除其所在双向链表的关系。

代码：

* []

```Java
class AllOne {
    class Node {
        int cnt;
        Set<String> set = new HashSet<>();
        Node left, right;
        Node(int _cnt) {
            cnt = _cnt;
        }
    }
    
    Node hh, tt;
    Map<String, Node> map = new HashMap<>();
    public AllOne() {
        hh = new Node(-1000); tt = new Node(-1000);
        hh.right = tt; tt.left = hh;
    }

    void clear(Node node) {
        if (node.set.size() == 0) {
            node.left.right = node.right;
            node.right.left = node.left;
        }
    }
    
    public void inc(String key) {
        if (map.containsKey(key)) {
            Node node = map.get(key);
            node.set.remove(key);
            int cnt = node.cnt;
            Node next = null;
            if (node.right.cnt == cnt + 1) {
                next = node.right;
            } else {
                next = new Node(cnt + 1);
                next.right = node.right;
                next.left = node;
                node.right.left = next;
                node.right = next;
            }
            next.set.add(key);
            map.put(key, next);
            clear(node);
        } else {
            Node node = null;
            if (hh.right.cnt == 1) {
                node = hh.right;
            } else {
                node = new Node(1);
                node.right = hh.right;
                node.left = hh;
                hh.right.left = node;
                hh.right = node;
            }
            node.set.add(key);
            map.put(key, node);
        }
    }
    
    public void dec(String key) {
        Node node = map.get(key);
        node.set.remove(key);
        int cnt = node.cnt;
        if (cnt == 1) {
            map.remove(key);
        } else {
            Node prev = null;
            if (node.left.cnt == cnt - 1) {
                prev = node.left;
            } else {
                prev = new Node(cnt - 1);
                prev.right = node;
                prev.left = node.left;
                node.left.right = prev;
                node.left = prev;
            }
            prev.set.add(key);
            map.put(key, prev);
        }
        clear(node);
    }
    
    public String getMaxKey() {
        Node node = tt.left;
        for (String str : node.set) return str;
        return "";
    }
    
    public String getMinKey() {
        Node node = hh.right;
        for (String str : node.set) return str;
        return "";
    }
}
```

* 时间复杂度：$O(1)$
* 空间复杂度：$O(n)$

---

## 同类型加餐

AC 本题的前置 🧀 ： [实现一个 LRUCache（手写双向链表入门题）](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247490403%26idx%3D1%26sn%3Ddd361a87d74eec4ca9ef97efe016c906)

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~

