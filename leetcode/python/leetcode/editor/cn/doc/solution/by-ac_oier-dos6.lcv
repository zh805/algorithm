## 二进制枚举

令 $n$ 为 $nums$ 的长度，利用 $n$ 不超过 $16$，我们可以使用一个 `int` 数值来代指 $nums$ 的使用情况（子集状态）。

假设当前子集状态为 $state$，$state$ 为一个仅考虑低 $n$ 位的二进制数，当第 $k$ 位为 $1$，代表 $nums[k]$ 参与到当前的按位或运算，当第 $k$ 位为 $0$，代表 $nums[i]$ 不参与到当前的按位或运算。

在枚举这 $2^n$ 个状态过程中，我们使用变量 `max` 记录最大的按位或得分，使用 `ans` 记录能够取得最大得分的状态数量。

代码：

* []

```Java
class Solution {
    public int countMaxOrSubsets(int[] nums) {
        int n = nums.length, mask = 1 << n;
        int max = 0, ans = 0;
        for (int s = 0; s < mask; s++) {
            int cur = 0;
            for (int i = 0; i < n; i++) {
                if (((s >> i) & 1) == 1) cur |= nums[i];
            }
            if (cur > max) {
                max = cur; ans = 1;
            } else if (cur == max) {
                ans++;
            }
        }
        return ans;
    }
}
```

* 时间复杂度：令 $nums$ 长度为 $n$，共有 $2^n$ 个子集状态，计算每个状态的按位或得分的复杂度为 $O(n)$。整体复杂度为 $O(2^n * n)$
* 空间复杂度：$O(1)$

---

## 状压 DP

为了优化解法一中「每次都要计算某个子集的得分」这一操作，我们可以将所有状态的得分记下来，采用「动态规划」思想进行优化。

需要找到当前状态 $state$ 可由哪些状态转移而来：假设当前 $state$ 中处于最低位的 $1$ 位于第 $idx$ 位，首先我们可以使用 `lowbit` 操作得到「仅保留第 $idx$ 的 $1$ 所对应的数值」，记为 $lowbit$，那么显然对应的状态方程为：

$$
f[state] = f[state - lowbit] \wedge nums[idx]
$$

再配合我们从小到大枚举所有的 $state$ 即可确保计算 $f[state]$ 时所依赖的 $f[state - lowbit]$ 已被计算。

最后为了快速知道数值 $lowbit$ 最低位 $1$ 所处于第几位（也就是 $idx$ 为何值），我们可以利用 $nums$ 长度最多不超过 $16$ 来进行「打表」预处理。

代码：

* []

```Java
class Solution {
    static Map<Integer, Integer> map = new HashMap<>();
    static {
        for (int i = 0; i < 20; i++) map.put((1 << i), i);
    }
    public int countMaxOrSubsets(int[] nums) {
        int n = nums.length, mask = 1 << n;
        int[] f = new int[mask];
        int max = 0, ans = 0;
        for (int s = 1; s < mask; s++) {
            int lowbit = (s & -s);
            int prev = s - lowbit, idx = map.get(lowbit);
            f[s] = f[prev] | nums[idx];
            if (f[s] > max) {
                max = f[s]; ans = 1;
            } else if (f[s] == max) {
                ans++;
            }
        }
        return ans;
    }
}
```

* 时间复杂度：$O(2^n)$
* 空间复杂度：$O(2^n)$

---

## DFS

解法一将「枚举子集/状态」&「计算状态对应的得分」两个过程分开进行，导致了复杂度上界为 $O(2^n * n)$。

事实上，我们可以在「枚举子集」的同时「计算相应得分」，设计 `void dfs(int u, int val)` 的 `DFS`  函数来实现「爆搜」，其中 $u$ 为当前的搜索到 $nums$ 的第几位，$val$ 为当前的得分情况。

对于任意一位 $x$ 而言，都有「选」和「不选」两种选择，分别对应了 `dfs(u + 1, val | nums[x])` 和 `dfs(u + 1, val)` 两条搜索路径，在搜索所有状态过程中，使用全局变量 `max` 和 `ans` 来记录「最大得分」以及「取得最大得分的状态数量」。

该做法将多条「具有相同前缀」的搜索路径的公共计算部分进行了复用，从而将算法复杂度下降为 $O(2^n)$。

代码：

* []

```Java
class Solution {
    int[] nums;
    int max = 0, ans = 0;
    public int countMaxOrSubsets(int[] _nums) {
        nums = _nums;
        dfs(0, 0);
        return ans;
    }
    void dfs(int u, int val) {
        if (u == nums.length) {
            if (val > max) {
                max = val; ans = 1;
            } else if (val == max) {
                ans++;
            }
            return ;
        }
        dfs(u + 1, val);
        dfs(u + 1, val | nums[u]);
    }
}
```

* 时间复杂度：令 $nums$ 长度为 $n$，共有 $2^n$ 个子集状态。整体复杂度为 $O(2^n)$
* 空间复杂度：忽略递归带来的额外空间开销，复杂度为 $O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
