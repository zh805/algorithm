### 解题思路

看到题目是找组合，第一反应就是回溯
回溯经典的题型有全排列、求子集、求组合，很明显这就是求组合的问题

求组合模板

* cpp

```cpp
void backtrack(vector<int>& nums, int start, vector<int>& track) {
    // 到达树的底部
    if (nums.size() == track.size()) {
        res.push_back(track);
        return;
    }
    // 注意 i 从 start 开始递增
    for (int i = start; i <= n; i++) {
        track.push_back(i);
        backtrack(n, k, i + 1, track);
        track.pop_back();
    }
}
```

我们把它在同一层的遍历范围约束一下，按照数字-字符串的映射，**每层遍历的范围应该是对应数字的字符串**。

下面是解题代码

### 代码

* cpp

```cpp
class Solution {
    vector<string>ans;
    string tmp;
    const vector<string>dic={"abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
public:
    vector<string> letterCombinations(string digits) {
        int len=digits.size();
        if(!len) return ans;
        backtrack(digits,0);
        return ans;
    }
    void backtrack(string &digits,int pos){
        if(pos>=digits.size()){
            ans.emplace_back(tmp);
            return;
        }
        int num=digits[pos]-'2';
        for(char c:dic[num]){
            tmp+=c;
            backtrack(digits,pos+1);
            tmp.pop_back();
        }
    }
};
```

莫名的高效（可能是运气好，测试样例简单）
![image.png](https://pic.leetcode-cn.com/1644813686-DjVAoL-image.png)
