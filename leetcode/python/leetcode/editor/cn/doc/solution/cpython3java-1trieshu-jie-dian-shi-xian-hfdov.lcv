思路和心得：

# （一）Trie树结点实现

* []

```python3
class Trie:
    def __init__(self):
        self.child = [None for _ in range(2)]
    
    def insert(self, x: int) -> None:
        root = self
        for i in range(30, -1, -1):
            ID = (x >> i) & 1
            if root.child[ID] == None:
                root.child[ID] = Trie()
            root = root.child[ID]

    def query(self, x: int) -> int:
        root = self
        res = 0
        for i in range(30, -1, -1):
            ID = (x >> i) & 1
            if root.child[1 - ID] != None:
                res = res * 2 + 1
                root = root.child[1 - ID]
            else:
                res = res * 2
                root = root.child[ID]
        return res            

class Solution:
    def findMaximumXOR(self, nums: List[int]) -> int:
        n = len(nums)

        T = Trie()
        res = 0
        for x in nums:
            T.insert(x)
            res = max(res, T.query(x))
        return res
```

* []

```c++
class Trie
{
public:
    Trie * left;
    Trie * right;

    Trie()
    {
        left = NULL;
        right = NULL;
    }

    void insert(int x)
    {
        Trie * root = this;
        for (int i = 30; i > -1; i --)
        {
            int ID = (x >> i) & 1;
            if (ID == 0)
            {
                if (root->left == NULL)
                    root->left = new Trie();
                root = root->left;
            }
            else
            {
                if (root->right == NULL)
                    root->right = new Trie();
                root = root->right;
            }
        }
    }

    int query(int x)
    {
        Trie * root = this;
        int res = 0;
        for (int i = 30; i > -1; i --)
        {
            int ID = (x >> i) & 1;
            if (ID == 0)
            {
                if (root->right != NULL)
                {
                    res = res * 2 + 1;
                    root = root->right;
                }
                else
                {
                    res = res * 2;
                    root = root->left;
                }
            }
            else
            {
                if (root->left != NULL)
                {
                    res = res * 2 + 1;
                    root = root->left;
                }
                else
                {
                    res = res * 2;
                    root = root->right;
                }
            }
        }
        return res;
    }

};


class Solution 
{
public:
    int findMaximumXOR(vector<int>& nums) 
    {
        Trie * T = new Trie();
        int res = 0;
        for (int x : nums)
        {
            T->insert(x);
            res = max(res, T->query(x));
        }
        return res;
    }
};
```

* []

```java
class Trie
{
    Trie left;
    Trie right;

    Trie()
    {
        left = null;
        right = null;
    }

    public void insert(int x)
    {
        Trie root = this;
        for (int i = 30; i > -1; i --)
        {
            int ID = (x >> i) & 1;
            if (ID == 0)
            {
                if (root.left == null)
                    root.left = new Trie();
                root = root.left;
            }
            else
            {
                if (root.right == null)
                    root.right = new Trie();
                root = root.right;
            }
        }
    }

    public int query(int x)
    {
        Trie root = this;
        int res = 0;
        for (int i = 30; i > -1; i --)
        {
            int ID = (x >> i) & 1;
            if (ID == 0)
            {
                if (root.right != null)
                {
                    res = res * 2 + 1;
                    root = root.right;
                }
                else
                {
                    res = res * 2;
                    root = root.left;
                }
            }
            else
            {
                if (root.left != null)
                {
                    res = res * 2 + 1;
                    root = root.left;
                }
                else
                {
                    res = res * 2;
                    root = root.right;
                }
            }
        }
        return res;
    }
}


class Solution 
{
    public int findMaximumXOR(int[] nums) 
    {
        Trie T = new Trie();
        int res = 0;
        for (int x : nums)
        {
            T.insert(x);
            res = Math.max(res, T.query(x));
        }
        return res;
    }
}
```

# （二）Trie树数组实现

* []

```python3
class Trie:
    def __init__(self):
        self.child = [None for _ in range(2)]
    
    def insert(self, x: int) -> None:
        root = self
        for i in range(30, -1, -1):
            ID = (x >> i) & 1
            if root.child[ID] == None:
                root.child[ID] = Trie()
            root = root.child[ID]

    def query(self, x: int) -> int:
        root = self
        res = 0
        for i in range(30, -1, -1):
            ID = (x >> i) & 1
            if root.child[1 - ID] != None:
                res = res * 2 + 1
                root = root.child[1 - ID]
            else:
                res = res * 2
                root = root.child[ID]
        return res            

class Solution:
    def findMaximumXOR(self, nums: List[int]) -> int:
        n = len(nums)

        T = Trie()
        res = 0
        for x in nums:
            T.insert(x)
            res = max(res, T.query(x))
        return res
```

* []

```c++
class Trie
{
public:
    Trie * child [2];

    Trie()
    {
        memset(child, 0, sizeof(child));
    }

    void insert(int x)
    {
        Trie * root = this;
        for (int i = 30; i > -1; i --)
        {
            int ID = (x >> i) & 1;
            if (root->child[ID] == NULL)
                root->child[ID] = new Trie();
            root = root->child[ID];
        }
    }

    int query(int x)
    {
        Trie * root = this;
        int res = 0;
        for (int i = 30; i > -1; i --)
        {
            int ID = (x >> i) & 1;
            if (root->child[1 - ID] != NULL)
            {
                res = res * 2 + 1;
                root = root->child[1 - ID];
            }
            else
            {
                res = res * 2;
                root = root->child[ID];
            }
        }
        return res;
    }

};


class Solution 
{
public:
    int findMaximumXOR(vector<int>& nums) 
    {
        Trie * T = new Trie();
        int res = 0;
        for (int x : nums)
        {
            T->insert(x);
            res = max(res, T->query(x));
        }
        return res;
    }
};
```

* []

```java
class Trie
{
    Trie [] child = new Trie [2];

    Trie(){}

    public void insert(int x)
    {
        Trie root = this;
        for (int i = 30; i > -1; i --)
        {
            int ID = (x >> i) & 1;
            if (root.child[ID] == null)
                root.child[ID] = new Trie();
            root = root.child[ID];
        }
    }

    public int query(int x)
    {
        Trie root = this;
        int res = 0;
        for (int i = 30; i > -1; i --)
        {
            int ID = (x >> i) & 1;
            if (root.child[1 - ID] != null)
            {
                res = res * 2 + 1;
                root = root.child[1 - ID];
            }
            else
            {
                res = res * 2;
                root = root.child[ID];
            }
        }
        return res;
    }
}


class Solution 
{
    public int findMaximumXOR(int[] nums) 
    {
        Trie T = new Trie();
        int res = 0;
        for (int x : nums)
        {
            T.insert(x);
            res = Math.max(res, T.query(x));
        }
        return res;
    }
}
```

