## 模拟 + 哈希表

为了方便，我们将 `input` 替换为 `s`。

对于每一个文件或文件夹而言，我们可以通过访问到结尾（`\n`）的方式取得，记为 `cur`，然后根据 `cur` 前面有多少个 `\t` 得知其所在的层级，假设当前其所在层级为 `level`，那么它自然归属到最新一个层级为 `level - 1` 的文件夹中，因此我们可以使用哈希表记录每个层级最新的文件夹路径，通过字符串拼接的方式得到 `cur` 所在的完整路径 `path`，并在处理整个 `s` 过程中，统计长度最大的文件路径。

代码：

* []

```Java
class Solution {
    public int lengthLongestPath(String s) {
        Map<Integer, String> map = new HashMap<>();
        int n = s.length();
        String ans = null;
        for (int i = 0; i < n; ) {
            int level = 0;
            while (i < n && s.charAt(i) == '\t' && ++level >= 0) i++;
            int j = i;
            boolean isDir = true;
            while (j < n && s.charAt(j) != '\n') {
                if (s.charAt(j++) == '.') isDir = false;
            }
            String cur = s.substring(i, j);
            String prev = map.getOrDefault(level - 1, null);
            String path = prev == null ? cur : prev + "/" + cur;
            if (isDir) map.put(level, path);
            else if (ans == null || path.length() > ans.length()) ans = path;
            i = j + 1;
        }
        return ans == null ? 0 : ans.length();
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 优化

上述做法只是为了方便我们输出具体方案。

实际上，我们只关心最终的路径长度，而不关心具体路径，因此容易将解法一修改为只记录长度，而不记录路径的做法，从而避免掉字符串拼接带来的消耗，同时利用 `s` 的长度数据范围，使用数组来替代常数较大的哈希表。

代码：

* []

```Java
class Solution {
    static int[] hash = new int[10010];
    public int lengthLongestPath(String s) {
        Arrays.fill(hash, -1);
        int n = s.length(), ans = 0;
        for (int i = 0; i < n; ) {
            int level = 0;
            while (i < n && s.charAt(i) == '\t' && ++level >= 0) i++;
            int j = i;
            boolean isDir = true;
            while (j < n && s.charAt(j) != '\n') {
                if (s.charAt(j++) == '.') isDir = false;
            }
            Integer cur = j - i;
            Integer prev = level - 1 >= 0 ? hash[level - 1] : -1;
            Integer path = prev + 1 + cur;
            if (isDir) hash[level] = path;
            else if (path > ans) ans = path;
            i = j + 1;
        }
        return ans;
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(C)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
