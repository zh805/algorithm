## 哈希表 + 删除交换

对于 `insert` 和 `remove` 操作容易想到使用「哈希表」来实现 $O(1)$ 复杂度，但对于 `getRandom` 操作，比较理想的情况是能够在一个数组内随机下标进行返回。

将两者结合，我们可以将哈希表设计为：以入参 `val` 为键，数组下标 `loc` 为值。

**为了确保严格 $O(1)$，我们不能「使用拒绝采样」和「在数组非结尾位置添加/删除元素」。**

因此我们需要申请一个足够大的数组 `nums`（利用数据范围为 $2* 10^5$），并使用变量 `idx` 记录当前使用到哪一位（即下标在 $[0, idx]$ 范围内均是存活值）。

对于几类操作逻辑：

* `insert` 操作：使用哈希表判断 `val` 是否存在，存在的话返回 `fasle`，否则将其添加到 `nums`，更新 `idx`，同时更新哈希表；
* `remove` 操作：使用哈希表判断 `val` 是否存在，不存在的话返回 `false`，否则从哈希表中将 `val` 删除，同时取出其所在 `nums` 的下标 `loc`，然后将 `nums[idx]` 赋值到 `loc` 位置，并更新 `idx`（含义为将原本处于 `loc` 位置的元素删除），同时更新原本位于 `idx` 位置的数在哈希表中的值为 `loc`（若 `loc` 与 `idx` 相等，说明删除的是最后一个元素，这一步可跳过）；
* `getRandom` 操作：由于我们人为确保了 $[0, idx]$ 均为存活值，因此直接在 $[0, idx + 1)$ 范围内进行随机即可。

代码：

* []

```Java
class RandomizedSet {
    static int[] nums = new int[200010];
    Random random = new Random();
    Map<Integer, Integer> map = new HashMap<>();
    int idx = -1;
    public boolean insert(int val) {
        if (map.containsKey(val)) return false;
        nums[++idx] = val;
        map.put(val, idx);
        return true;
    }
    public boolean remove(int val) {
        if (!map.containsKey(val)) return false;
        int loc = map.remove(val);
        if (loc != idx) map.put(nums[idx], loc);
        nums[loc] = nums[idx--];
        return true;
    }
    public int getRandom() {
        return nums[random.nextInt(idx + 1)];
    }
}
```

* 时间复杂度：所有操作均为 $O(1)$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
