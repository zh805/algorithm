* 

```
class Solution {
    int K = 0;
    int N = 0;
    public List<List<Integer>> combine(int n, int k) {
        K = k;
        N = n;
        List<List<Integer>> res = new ArrayList<>();
        Deque<Integer> deque = new ArrayDeque<>();
        dfs(res, deque, 1);
        return res;
    }

    private void dfs(List<List<Integer>> res, Deque<Integer> path, int start){

        if(path.size() == K){
            res.add(new ArrayList<>(path));
            return;
        }
        for(int i = start; i <= N; i ++){
            path.add(i);
            dfs(res, path, i + 1);
            path.pollLast();
        }
    }
}
```

