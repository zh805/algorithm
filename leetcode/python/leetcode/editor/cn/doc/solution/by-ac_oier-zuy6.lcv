## 栈

每个 `[` 的出现意味着存在一个嵌套类型的 `NestedInteger` 实例，同时每个 `NestedInteger` 实例（无论是嵌套类型还是数值类型）都归属于其最近一个左边的嵌套类型的 `NestedInteger` 实例（即其左边最近一个 `[`），因此我们可以使用栈来处理。

对出现的几类字符进行简单分情况讨论：

* `,`：跳过即可；
* `-` 或 `数字`：将连续段代表数值的字符串取出，创建数值型的 `NestedInteger` 实例并压入栈中；
* `[`：创建一个嵌套类型的 `NestedInteger` 实例并压入栈中，同时为了方便，同时压入一个起「标识」作用的 `NestedInteger` 对象；
* `]`：从栈中取出元素，直到遇到起「标识」作用的 `NestedInteger` 对象（说明找到与当前 `]` 成对的 `[`），将 `[` 和 `]` 之间的所有元素添加到 `[` 所代指的嵌套 `NestedInteger` 实例中，然后将 `[` 所代指的嵌套 `NestedInteger` 实例重新放入栈中。

按照上述逻辑处理完整个 `s`，最终栈顶元素即是答案。

代码：

* []

```Java
class Solution {
    static NestedInteger ph = new NestedInteger(0);
    public NestedInteger deserialize(String s) {
        Deque<NestedInteger> d = new ArrayDeque<>();
        char[] cs = s.toCharArray();
        int n = cs.length, i = 0;
        while (i < n) {
            if (cs[i] == ',' && ++i >= 0) continue;
            if (cs[i] == '-' || (cs[i] >= '0' && cs[i] <= '9')) {
                int j = cs[i] == '-' ? i + 1 : i, num = 0;
                while (j < n && (cs[j] >= '0' && cs[j] <= '9')) num = num * 10 + (cs[j++] - '0');
                d.addLast(new NestedInteger(cs[i] == '-' ? -num : num));
                i = j;
            } else if (cs[i] == '[') {
                d.addLast(new NestedInteger());
                d.addLast(ph);
                i++;
            } else {
                List<NestedInteger> list = new ArrayList<>();
                while (!d.isEmpty()) {
                    NestedInteger poll = d.pollLast();
                    if (poll == ph) break;
                    list.add(poll);
                }
                for (int j = list.size() - 1; j >= 0; j--) d.peekLast().add(list.get(j));
                i++;
            }
        }
        return d.peekLast();
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
