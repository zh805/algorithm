### 方便快速学习算法与理解~

🌇 点赞 👍 收藏 ⭐留言 📝 一键三连 ~关注Jam，从你我做起！

**兄弟会背叛你，女人会离开你，金钱会诱惑你，生活会刁难你，只有数学不会，不会就是不会**
**天才与否，取决于最终达到的高度。真正的天才是那些脚踏实地的人**
**静下心来好好做自己，走稳脚下每一步，就是最好的路，强者都是孤独的**

推荐 python 算法的书籍，体系化学习算法与数据结构，用正确的方式成为offer收割机
[leetcode](https://github.com/ls1248659692/leetcode) ——  **系统化快速学习算法，这不是内卷，这只是悄悄地努力，然后惊艳所有的人**
![image.png](https://pic.leetcode-cn.com/1648775483-TkJGtq-image.png)

---

### 求解思路

模拟下具体情况：
`arr = [2,4,4,8,8,16]`
1.` [2,4]` 匹配完成后，4的个数减少1次，4的个数从2个变为1个，2的个数变为0个
2. `[4,8]` 匹配完成后，8的个数减少1次，8的个数从2个变为1个，此时4的个数变为0个
3. `[8，16] `匹配完成后，16的个数减少1次，16的个数从1个变为0个，此时8的个数变为0个
依次类推：
大小数字的个数关系需要满足: `num_map[num] ≤ num_map[2 * num] `
由于大的数还会被用于作为后续数字的 `num`, 每次匹配完成大的数据需要减去小的数据个数 ` num_map[2 * num] -= num_map[num]` 可以默认为小数据x的个数此时变为0

---

边界说明:
1. 对于出现0的特殊情况，`arr.length 是偶数` 题目提示已经给出，如果只有一个0，必定存在另外一个数不能配对，题目必定不满足， 不需要特殊考虑
2. 对于 `num` 为负数，这里和数值正负就没关系，只涉及倍数关系，只与 `num` 的绝对值大小有关，不需要去考虑

### 代码

* python3

```python3
class Solution:
    def canReorderDoubled(self, arr: List[int]) -> bool:
        num_map = collections.Counter(arr)
        for num in sorted(num_map, key=abs):
            if num_map[num] > num_map[2 * num]:
                return False
            num_map[2 * num] -= num_map[num]
        return True
```

