## 数学 + 贪心

我们假定取得最优解的表示为 $\frac{a}{b}$，可以留意到任意的 $nums[i]$ 的范围为 $[2, 1000]$，因此我们应当让尽可能多的 $nums[i]$ 参与 $a$（分子）的构建中。

因此一种可以构成最优表示的方式为「将除第一位以外的所有数作为一组，进行连除（转乘法），从而将所有 **可以** 变成分子的数都参与到 $a$ 的构建中」。

即有：
$$
\frac{nums[0]}{nums[1] / nums[2] / ... / nums[n - 1]} = \frac{nums[0]}{nums[1] * \frac{1}{nums[2]} * ... * \frac{1}{nums[n - 1]}} = \frac{nums[0] * nums[2] * ... * nums[n - 1]}{nums[1]}
$$

综上，我们只需要从前往后进行构建出连除的答案，如果 $nums$ 的长度大于 $2$，再追加一对大括号即可。

$[a_0, a_1, ... , a_n]$ => $a_0/a_1/.../a_n$ => $a_0/(a_1/.../a_n)$

代码：

* []

```Java
class Solution {
    public String optimalDivision(int[] nums) {
        int n = nums.length;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append(nums[i]);
            if (i + 1 < n) sb.append("/");
        }
        if (n > 2) {
            sb.insert(sb.indexOf("/") + 1, "(");
            sb.append(")");
        }
        return sb.toString();
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n * C)$，其中 $C$ 为 $nums[i]$ 的最大长度，对于本题 $C = 4$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
