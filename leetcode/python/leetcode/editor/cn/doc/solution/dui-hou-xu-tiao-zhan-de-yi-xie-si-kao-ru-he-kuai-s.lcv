#### 对后续挑战的一些思考

> 如果有大量输入的 S，称作 S1, S2, ... , Sk 其中 k >= 10 亿，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？

这种类似对同一个长字符串做很多次匹配的 ，可以像 KMP 算法一样，先用一些时间将长字符串中的数据 **提取出来**，磨刀不误砍柴功。有了提取好的数据，就可以快速的进行匹配。

#### 1.我们需要提取什么样的数据

这道题其实是贪心算法，上面的整个算法很简单，容易理解（是因为人都是贪心的吗 233）。 这里需要的数据就是匹配到某一点时 待匹配的字符在长字符串中 **下一次** 出现的位置。

所以我们前期多做一点工作，将长字符串研究透彻，假如长字符串的长度为 $n$，建立一个 $n * 26$ 大小的矩阵，表示每个位置上26个字符下一次出现的位置。实现如下：

* []

```C++
vector<vector<int> > dp(len2 , vector<int>(26, 0));

for (char c = 'a'; c <= 'z'; c++) {
    int nextPos = -1; //表示接下来再不会出现该字符

    for (int i = len2 - 1; i>= 0; i--) {  //为了获得下一个字符的位置，要从后往前
        dp[i][c - 'a'] = nextPos;
        if (t[i] == c)
            nextPos = i;
    }
}
```

### 2.数据的利用

对于要匹配的短字符串，遍历每一个字符，不断地寻找该字符在长字符串中的位置，然后将位置更新，寻找下一个字符，相当于在长字符串上“跳跃”。

如果下一个位置为 `-1`，表示长字符串再没有该字符了，返回 `false` 即可。

如果能正常遍历完毕，则表示可行，返回 true

* []

```C++
int index = 0;
for (char c : s) {
     index = dp[index][c - 'a'];
     if (index == -1)
          return false;
}
return true;
```

#### 3.需要注意的一点

对于 `"abc"` 在 `"ahbgdc"` 上匹配的时候，由于长字符串第一个 `a` 的下一个出现 `a` 的位置为 -1（不出现），会导致一个 bug。

所以在生成数组时在长字符串前插入一个空字符即可。

#### 4.完整实现

* []

```C++
class Solution {
public:
	bool isSubsequence(string s, string t) {
		t.insert(t.begin(), ' ');
		int len1 = s.size(), len2 = t.size();
		
		vector<vector<int> > dp(len2 , vector<int>(26, 0));

		for (char c = 'a'; c <= 'z'; c++) {
			int nextPos = -1; //表示接下来再不会出现该字符

			for (int i = len2 - 1; i>= 0; i--) {  //为了获得下一个字符的位置，要从后往前
				dp[i][c - 'a'] = nextPos;
				if (t[i] == c)
					nextPos = i;
			}
		}

		int index = 0;
		for (char c : s) {
			index = dp[index][c - 'a'];
			if (index == -1)
				return false;
		}
		return true;

	}
};

```

---

结果 O.O

![1.jpg](https://pic.leetcode-cn.com/afb6c8562540a668f2147b6a688addea046535ddb791874f7040ca8af542c6cc-1.jpg)

---

ps：开学还遥遥无期，还是在家多做 leetcode，武汉加油！
