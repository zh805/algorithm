# 本题滑动窗口题解：

### 思路分析

首先定义两个指针 `left` 和 `right`，后续遍历数组与记录用，

1.左右指针起始均在位置 `0` ；用右指针遍历数组，每次循环中右指针右移一次；

2.移动过程中纪录从左指针到右指针路上的连续数的乘积为 `mul`；

3.如果乘积大于 `k` 了，则左指针右移，注意此处用的是 `while` 来使左指针右移，因为实际情况可能是：右指针最后右移一次指向了一个比较大的数使得 `mul` 不小于目标值，此时左指针需要右移多次才能使得 `mul` 刚小于 `k`；

4.最后用 `ans` 记录 `mul` 小于 `k` 时的数组组合；

思路看不明白直接上代码，结合起来理解就好了：

### 代码部分

* java

```java
class Solution {
    public int numSubarrayProductLessThanK(int[] nums, int k) {
        //同样排除k为1的情况比如  [1,1,1] k=1
        if (k <= 1) {
            return 0;
        }
        int left = 0;
        int right = 0;
        //创建一个变量记录路上的乘积
        int mul = 1;
        //记录连续数组的组合个数
        int ans = 0;

        //用右指针遍历整个数组，每次循环右指针右移一次
        while(right<nums.length) {
            //记录乘积
            mul *= nums[right];
            //当大于等于k，左指针右移并把之前左指针的数除掉
            while (mul >= k) {
                mul /= nums[left];
                left++;
            }

            //每次右指针位移到一个新位置，应该加上 x 种数组组合：
            //  nums[right]
            //  nums[right-1], nums[right]
            //  nums[right-2], nums[right-1], nums[right]
            //  nums[left], ......, nums[right-2], nums[right-1], nums[right]
            //共有 right - left + 1 种
            ans += right - left + 1;

            //右指针右移
            right++;
        }
        return ans;
    }
}
```

### 复杂度分析

本题采用的是双指针滑动窗口，大循环是右指针的移动，内部小循环是左指针的移动。

- 时间复杂度：O(n)，其中 n 是数组 nums 的长度，右指针遍历一遍数组，左指针紧随其后最多遍历一遍数组；

- 空间复杂度：O(1)，只创建了有限的几个常量变量作为记录。

# 扩展部分：滑动窗口解题模板

说到滑动窗口，这里分享两个滑窗模板

### 第一个模板：适用于需要使用 [变量] 记录的情况

例题如本题。还有类似题目如 [1004.最大连续1的个数 III]

#### 滑动窗口 + 变量计数模板：

* java

```java
class Solution {
    public int slidingWindow(int[] nums, int k) {
        //数组/字符串长度
        int n = nums.length;
        //双指针，表示当前遍历的区间[left, right]，闭区间
        int left = 0, right = 0;
        //定义变量统计 子数组/子区间 是否有效
        int sum = 0;
        //定义变量动态保存最大 求和/计数
        int res = 0;

        //右指针遍历到数组尾
        while (right < n) {
            //增加当前右指针对应的数值
            sum += nums[right];
            //当在该区间内 sum 超出定义范围
            while (sum > k) {
                //先将左指针指向的数值减去
                sum -= nums[left];
                //左指针右移
                left++;
            }
            //到 while 结束时，我们找到了一个符合题意要求的 子数组/子串
            res = Math.max(res, right - left + 1);
            //移动右指针，去探索下一个区间
            right++;
        }
        return res;
    }
}
```

#### 例：1004.最大连续1的个数 III

题解：

* java

```java
class Solution {
    public int longestOnes(int[] nums, int k) {
        //思路：将题目目的转为：求连续子数组，要求长度最大，0 最多为k
        //用滑动窗口，让 右指针 一直右移，记录0 的个数，记录长度，当0 大于k，则左指针右移
        int n = nums.length;
        int left = 0;
        int right = 0;

        int zeros = 0;
        int len = 0;
        //右指针到头位置
        while (right < n) {
            if (nums[right] == 0) {
                zeros++;
            }
            //当 0 个数超了，让left 一直右移到满足
            while (zeros > k) {
                if (nums[left] == 0) {
                    zeros--;
                }
                left++;
            }
            //记录符合条件的长度
            len = Math.max(len, right - left + 1);
            //右指针右移
            right++;
        }
        return len;
    }
}
```

### 第二个模板：适用于需要用 [哈希表] 记录的情况

类似题目诸如 [567.字符串的排列]、[438.找到字符串中所有字母异位词]

#### 滑动窗口 + 哈希表存储模板：

* java

```java
class Solution {
    public String slidingWindow(String s, String t) {
        //创建两个哈希表，分别记录 [需要的] 和 [加入的]
        Map<Character, Integer> need = new HashMap<>();
        Map<Character, Integer> map = new HashMap<>();

        //创建 [双指针] 和 [有效数量]
        int left = 0, right = 0;
        int valid = 0;

        //外层循环，供右指针遍历
        while(right < s.length()){
            //创建临时 c 字符，是移入 窗口 内的字符
            char c = s.charAt(right);
            
            //进行窗口一系列逻辑更新
            ...
            
            //判断左指针是否要右移即窗口收缩：有效数量足够满足条件
             /*  可能是规定的窗口大小超出了，可能是有效值数量达成了
             1.  while(valid == need.size())
             2.  while(right - left + 1 >= s1.length())      
             */           
            while(windows need shrink){
                // 创建 d 是要移除窗口的字符
                char d = s.charAt(left);
                left++;

                //进行窗口一系列逻辑更新
                ...
            }
            
            //右指针右移
            right++;
        }
    }
}
```

#### 例1：567.字符串的排列

题解：

* java

```java
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        //滑动窗口 + 两哈希，始终保证窗口长度，当长度超了，左指针准备右移

        Map<Character, Integer> need = new HashMap<>();
        Map<Character, Integer> map = new HashMap<>();

        //创建 [双指针] 和 [有效数量]
        int left = 0, right = 0;
        int valid = 0;

        //
        for(Character c : s1.toCharArray()){
            need.put(c, need.getOrDefault(c,0)+1);
        }
        //
        while(right < s2.length()){

            char c = s2.charAt(right);

            if(need.containsKey(c)){
                map.put(c,map.getOrDefault(c,0)+1);
                if(need.get(c).equals(map.get(c))){
                    valid++;
                }
            }

            //当凑齐了元素，还要判断长度
            while(right - left + 1 >= s1.length()){
                if(valid == need.size()){
                    return true;
                }
                char d = s2.charAt(left);
                if(need.containsKey(d)){
                    if(need.get(d).equals(map.get(d))){
                        valid--;
                    }
                    map.put(d,map.get(d)-1);
                }
                left++;
            }
            right++;
        }
        return false;
    }
}
```

#### 例2：438.找到字符串中所有字母异位词

题解：

* java

```java
class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        //滑动窗口 + 两哈希模板直接秒杀
        Map<Character, Integer> need = new HashMap<>();
        Map<Character, Integer> map = new HashMap<>();

        int left = 0;
        int right = 0;
        int valid = 0;
        List<Integer> list = new ArrayList<>();

        //
        for (Character ch : p.toCharArray()
        ) {
            need.put(ch, need.getOrDefault(ch, 0) + 1);
        }
        //
        while (right < s.length()) {
            char c = s.charAt(right);
            //镜像代码1
            if (need.containsKey(c)) {
                map.put(c, map.getOrDefault(c, 0) + 1);
                if (need.get(c).equals(map.get(c))) {
                    valid++;
                }
            }

            while (right - left + 1 >= p.length()) {
                if (valid == need.size()) {
                    list.add(left);
                }

                char d = s.charAt(left);

                left++;

                //镜像代码2
                if (need.containsKey(d)) {
                    if (need.get(d).equals(map.get(d))) {
                        valid--;
                    }
                    map.put(d, map.getOrDefault(d, 0) - 1);
                }
            }
            right++;
        }
        return list;
    }
}
```

