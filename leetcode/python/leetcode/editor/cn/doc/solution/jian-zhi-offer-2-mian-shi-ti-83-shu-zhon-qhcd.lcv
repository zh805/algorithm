# **回溯法**

排列和组合是不一样的，排列与元素的顺序有关。因为本题中不存在重复的数字，所以交换数字位置就能得到不同的排列。生成全排列的过程，也就是交换输入的集合中各数字的位置所得到的排列。

如果输入的集合共有 n 个数字，那么生成一个全排列需要 n 步。当生成全排列的第一个数字时存在 n 个选择，集合内的 n 个数字中任何一个数字都可以。生成全排列的第二个数字时存在 n - 1 个选择，即剩下的 n - 1 个数字都可以选择。以此类推，直到生成最后一个数字，此时只剩下一个数字，也就只有一种选择。

完整的过程可以分成若干步，每一步又面临若干个选择，此类问题可以选择使用回溯法。完整的代码如下，时间复杂度为 O(n!)。

* 

```
class Solution {
private:
    void helper(vector<int>& nums, int index, vector<vector<int>>& ret) {
        if (index == nums.size()) {
            ret.emplace_back(nums);
            return;
        }

        for (int i = index; i < nums.size(); ++i) {
            swap(nums[index], nums[i]);
            helper(nums, index + 1, ret);
            swap(nums[index], nums[i]);
        }
    }
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ret;
        helper(nums, 0, ret);
        return ret;
    }
};
```

