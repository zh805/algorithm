## 模拟

根据题意进行模拟即可。

代码：

* []

```Java
class Solution {
    public List<Integer> selfDividingNumbers(int left, int right) {
        List<Integer> ans = new ArrayList<>();
        out:for (int i = left; i <= right; i++) {
            int cur = i;
            while (cur != 0) {
                int t = cur % 10;
                if (t == 0 || i % t != 0) continue out;
                cur /= 10;
            }
            ans.add(i);
        }
        return ans;
    }
}
```

* []

```Python3
class Solution:
    def selfDividingNumbers(self, left: int, right: int) -> List[int]:
        ans = []
        for i in range(left, right + 1):
            cur, ok = i, True
            while cur and ok:
                ok = not ((t := cur % 10) == 0 or i % t != 0)
                cur //= 10
            if ok:
                ans.append(i)
        return ans
```

* 时间复杂度：令 $n = right - left + 1$，复杂度为 $O(n \log{right})$
* 空间复杂度：$O(1)$

---

## 打表 + 二分

利用数据范围只有 $1e4$，我们可以打表预处理出所有的自除数，通过二分找到 $[left, right]$ 范围内的最小自除数，再从前往后找到所有合法的自除数。

代码：

* []

```Java
class Solution {
    static List<Integer> list = new ArrayList<>();
    static {
        out:for (int i = 1; i <= 10000; i++) {
            int cur = i;
            while (cur != 0) {
                int u = cur % 10;
                if (u == 0 || i % u != 0) continue out;
                cur /= 10;
            }
            list.add(i);
        }
    }
    public List<Integer> selfDividingNumbers(int left, int right) {
        List<Integer> ans = new ArrayList<>();
        int l = 0, r = list.size() - 1;
        while (l < r) {
            int mid = l + r >> 1;
            if (list.get(mid) >= left) r = mid;
            else l = mid + 1;
        }
        while (r < list.size() && list.get(r) <= right) ans.add(list.get(r++));
        return ans;
    }
}
```

* 时间复杂度：令 $n = right - left + 1$，复杂度为 $O(\log{C} + n)$，其中 $C = 1e4$
* 空间复杂度：$O(C)$

---

## 打表 + 哈希表

由于我们打表预处理的做法空间复杂度上界已经是 $O(C)$，所有我们可以干脆将索引也预处理出来，从而避免二分操作。

其中 $hash[x]$ 的含义为值不超过 $x$ 的最大自除数在 `list` 中的下标。

代码：

* []

```Java
class Solution {
    static List<Integer> list = new ArrayList<>();
    static int[] hash = new int[100010];
    static {
        for (int i = 1; i <= 10000; i++) {
            int cur = i;
            boolean ok = true;
            while (cur != 0 && ok) {
                int u = cur % 10;
                if (u == 0 || i % u != 0) ok = false;
                cur /= 10;
            }
            if (ok) list.add(i);
            hash[i] = list.size() - 1;
        }
    }
    public List<Integer> selfDividingNumbers(int left, int right) {
        List<Integer> ans = new ArrayList<>();
        int idx = list.get(hash[left]) == left ? hash[left] : hash[left] + 1;
        while (idx < list.size() && list.get(idx) <= right) ans.add(list.get(idx++));
        return ans;
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(C)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
