## 递归

首先容易想到使用「递归」来实现 `DFS`。

将 $[1, n]$ 的数按照字典序添加到答案，本质上是对一颗节点数量为 $n$，形态类似字典树的多阶树进行遍历，根节点为 $0$，需要被跳过，因此我们可以从树的第二层开始搜索。

树中每个节点的值为其搜索路径所代表的数字，且每个节点有 $[0, 9]$ 共 $10$ 个子节点。

![image.png](https://pic.leetcode-cn.com/1650246458-ahFpqe-image.png)

代码：

* []

```Java
class Solution {
    List<Integer> ans = new ArrayList<>();
    public List<Integer> lexicalOrder(int n) {
        for (int i = 1; i <= 9; i++) dfs(i, n);
        return ans;
    }
    void dfs(int cur, int limit) {
        if (cur > limit) return ;
        ans.add(cur);
        for (int i = 0; i <= 9; i++) dfs(cur * 10 + i, limit);
    }
}
```

* 时间复杂度：本质上在搜索一棵节点数量为 $n$ 的多阶树（形态类似于字典树），复杂度为 $O(n)$
* 空间复杂度：忽略递归带来的额外空间开销，复杂度为 $O(1)$

---

## 迭代

递归具有额外的空间开销，为了实现严格的 $O(1)$ 空间，我们需要使用「迭代」来实现 `DFS`。

共有 $n$ 个数需要被处理，假设当前处理到的数为 $j$，根据字典序规则，在满足条件的前提下，我们优先在 $j$ 的后面添加 $0$（即 $j * 10 < n$ 满足），否则我们考虑将上一位回退并进行加一操作。

代码：

* []

```Java
class Solution {
    public List<Integer> lexicalOrder(int n) {
        List<Integer> ans = new ArrayList<>();
        for (int i = 0, j = 1; i < n; i++) {
            ans.add(j);
            if (j * 10 <= n) {
                j *= 10;
            } else {
                while (j % 10 == 9 || j + 1 > n) j /= 10;
                j++;
            }
        }
        return ans;
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
