下降路径最小和

这是一道经典的动态规划问题，求最小和嘛，典型的一步一步递推动态规划出最值，但虽然是一道经典且简单直白的动态规划问题，但是根据我们的思路却可以有好几种不同的写法都能得到同样的结果，我们可以从次去探究动态规划蕴含的一些奇妙的思想性质和特征。

我们知道一般来讲，递归是自顶向下求解，而动态规划可以通过自底向上的设计将递归转化，但这些结构只是方法本身所体现的，并不是我们思路所体现的，也即是说，你既可以有自顶向下设计的思路，也可以有自底向上设计的思路，只不过，一般情况下，对应的思路可以决定出一些特定的解法，但是，根据题目的不同，不同的思路一样可以用同一个方法来表示，也许这就是动态规划的魅力所在吧，虽然是一种算法，但是一道动态规划问题却可以每个人有每个人的写法，而且都可以得到最后的结果，而其本质在于：**一个具有动态规划性质（重叠子问题和最优子结构）的问题，只要能够正确地写出状态转移方程和初始化状态表，那么你怎么想的就怎么写，结果一般不会出错。**

就拿这个问题来举例吧。我们首先最直观的思路就是顺着题目的意思来，从当前位置，下一个状态就是它下一行的左中右三个位置，当然，如果位于边界的话，对应少一些位置情况。自然我们顺着题目从上面往下面走，自顶向下地去思考的话，我们可以自然规划一个dp[i][j]数组表示从第一行最终落到(i,j)位置的最小路径和，自然初始化状态就是第一行的数组对应的值，然后对于每个当前已知的dp[i][j]，按照题目的意思自然可以转移到下面一行的j-1,j,j+1去，边界情况额外考虑即可，最后更新完，就是从dp[n-1]里面找最小值就是了，这是第一种，最直观的，顺着题目意思来的动态规划设计，也是最容易想到的。

* 

```
class Solution {
public:
    //自顶向下 纯粹的按找题目意思来的 没有做任何转化
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n=matrix.size();
        vector<vector<int>> dp(n,vector<int>(n,INT_MAX));
        for(int j=0;j<n;j++)dp[0][j]=matrix[0][j];
        for(int i=0;i<n-1;i++){
            for(int j=0;j<n;j++){
                dp[i+1][j]=min(dp[i+1][j],dp[i][j]+matrix[i+1][j]);
                if(j>0)dp[i+1][j-1]=min(dp[i+1][j-1],dp[i][j]+matrix[i+1][j-1]);
                if(j<n-1)dp[i+1][j+1]=min(dp[i+1][j+1],dp[i][j]+matrix[i+1][j+1]);
            }
        }
        int res=dp[n-1][0];
        for(auto& x:dp[n-1])res=min(res,x);
        return res;
    }
};
```

这一种C++提交测试一般耗时16ms，其实我们稍微变通一下，上一个写法一个不好的地方就是从当前状态更新下一行的时候，遍历当前行的时候，下一行的对应位置会重复判断最小值进行更新，而且dp数组必须初始化为一个极大值来更新最小值的情况，那我们自然会想到，除了自顶向下推导，我们可以逆向思维，对于下一行的值，决定它的只有可能是上面一行的对应左中右三个位置的值，那么由于我们已知上面一行的结果，便可以直接决定更新下面一行的值了，我们只是稍微更换了一个看待更新行的视角，便又得到了第二种解法，仔细比对代码，还是可以看到区别的，一个是**从当前行推下一行**，一个是**从前一行推当前行**，**注意外循环i的更新范围**。

* 

```
class Solution {
public:
    //自顶向下 更换一个视角
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n=matrix.size();
        vector<vector<int>> dp(n,vector<int>(n));
        for(int j=0;j<n;j++)dp[0][j]=matrix[0][j];
        for(int i=1;i<n;i++){
            for(int j=0;j<n;j++){
                dp[i][j]=dp[i-1][j]+matrix[i][j];
                if(j>0)dp[i][j]=min(dp[i-1][j-1]+matrix[i][j],dp[i][j]);
                if(j<n-1)dp[i][j]=min(dp[i-1][j+1]+matrix[i][j],dp[i][j]);
            }
        }
        int res=dp[n-1][0];
        for(auto& x:dp[n-1])res=min(res,x);
        return res;
    }
};
```

这一种一般提交时12ms，不过差别还不是很大，但是我们dp数组并不要求全部初始化为一个极大值了。不过顺着第二个的想法，我们可以设计出官解那样的写法。因为第二种方法虽然是用前一行更新当前行，但整体上还是自顶向下的。既然我们的终点就是最后一行，那利用第二种方法的更新思路整体上自底向上地设计，下面每三个位置可以决定上一行的最优值，即**从当前行推前一行**，那么最后直接从第一行找最小值不就行了，而且基于这样的设计我们甚至不需要dp数组了，原数组便可以帮助我们实现更新维护的效果。

* 

```
class Solution {
public:
    //参考官解思路 自底向上的设计 边界条件的巧妙而优雅的优化
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n=matrix.size();
        for(int i=n-2;i>=0;i--){
            for(int j=0;j<n;j++){
                //下一行只有三个位置可以转化到上一行 找最优子结构+边界的优雅处理
                int temp=matrix[i+1][j];
                if(j>0)temp=min(temp,matrix[i+1][j-1]);
                if(j<n-1)temp=min(temp,matrix[i+1][j+1]);
                matrix[i][j]+=temp;//原地优化更新状态
            }
        }
        int res=matrix[0][0];
        for(auto& x:matrix[0])res=min(res,x);
        return res;
    }
};
```

这一种C++提交可以到达8ms了。如上可见，一道问题，一个动态规划的思想，我们就写出来三种不同的写法，而且执行效率确实是有细微的差距的，这里面的动态规划思想值得我们好好体悟！

