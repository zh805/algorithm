### 解题思路

- 先对宽度w进行升序排序，如果遇到w相同的情况，则按照高度h降序排序。之后把所有的h作为一个数组，在这个数组上计算 LIS(最长递增子序列) 的长度就是答案。
  ![image.png](https://pic.leetcode-cn.com/1641952859-FlDSJT-image.png)

- 在height上寻找最长递增子序列
  ![image.png](https://pic.leetcode-cn.com/1641952908-fmkhmn-image.png)
- 最长递增子序列可参考[动态规划和二分查找：两种解法详细注释，图解思路](https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/dong-tai-gui-hua-he-er-fen-cha-zhao-lian-x7dh/)

### 代码

* javascript

```javascript
/**
 * @param {number[][]} envelopes
 * @return {number}
 */
var maxEnvelopes = function (envelopes) {
  const n = envelopes.length;
  // w升序排序，如果w相同，h逆序排序
  // 因为w相同时不能互相嵌套，所以w相同时将h逆序排序
  envelopes.sort((e1, e2) => (e1[0] !== e2[0] ? e1[0] - e2[0] : e2[1] - e1[1]));

  // 求height数组，排好序后的h组成的数组
  const height = new Array(n).fill(1);
  for (let i = 0; i < n; i++) {
    height[i] = envelopes[i][1];
  }

  // 求h数组的最长递增子序列
  const dp = new Array(n).fill(1);
  for (let i = 0; i < height.length; i++) {
    for (let j = 0; j < i; j++) {
      if (height[i] > height[j]) {
        dp[i] = Math.max(dp[i], dp[j] + 1);
      }
    }
  }

  /* let res = 0;
  for (let i = 0; i < dp.length; i++) {
    res = Math.max(res, dp[i]);
  }
  return res; */
  return Math.max(...dp);
};


```

