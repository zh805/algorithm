### 1. 总结问题

问题本质就是在循环中决策如何动手收益最高? 背景是对这家动手的话那么前一家就不能动了，所以总结问题:

**是否选择偷当前房屋取决于: 是偷当前房屋收益高,还是偷前一家房屋收益高?**

### 2. 举例说明

假设有10间房屋，现在我正在对第5间进行决策，那么我的决策思路就是判断 **偷前三家+第五家赚,还是偷前四家更赚**

典型的动态规划记忆化搜索问题，状态转移方程: 偷到第N家时的最大收益 = max(N-2家时的最大收益+第N家收益, N-1家时的最大收益)

同时也显而易见的需要对N=1, N=2的场景进行初始化

### 3. 转换为代码

* Go

```Go
func rob(nums []int) int {
    if len(nums) == 1{  // 特殊情况处理
        return nums[0]
    }
    dp := make([]int, len(nums))
    dp[0], dp[1] = nums[0], max(nums[0], nums[1])  // N=1 N=2 场景初始化
    for i:=2;i<len(nums);i++{
        dp[i] = max(dp[i-1], dp[i-2] + nums[i])  // 状态转移
    }
    return dp[len(nums)-1]
}

func max(a,b int)int{
    if a > b{
        return a
    }
    return b
}
```

