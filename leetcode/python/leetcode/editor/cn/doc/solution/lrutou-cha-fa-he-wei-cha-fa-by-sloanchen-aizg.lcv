### 解题思路

可以把最新访问的节点放在链表头部或尾部，对应头插法和尾插法

### 代码

* java

```java
class LRUCache {
    //头插法
    class Node{
        Node pre, next;
        int key, val;
        public Node(){

        }
        public Node(int key, int val){
            this.key = key;
            this.val = val;
        }
    }

    Node head = new Node();
    Node tail = new Node();
    int size = 0;
    Map<Integer, Node> map;

    public void deleteNode(Node node){
        node.next.pre = node.pre;
        node.pre.next = node.next;
    }

    public void moveToHead(Node node){
        deleteNode(node);
        addToHead(node);
    }

    public void addToHead(Node node){
        Node after = head.next;
        head.next = node;
        node.next = after;
        after.pre = node;
        node.pre = head;
    }

    public LRUCache(int capacity) {
        size = capacity;
        map = new HashMap<>();
        head.next = tail;
        tail.pre = head;
    }
    
    public int get(int key) {
        if(!map.containsKey(key)) return -1;
        Node node = map.get(key);
        moveToHead(node);
        return node.val;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            Node node = map.get(key);
            node.val = value;
            map.put(key, node);
            moveToHead(node);
        }else{
            if(map.size() == size){
                Node node = tail.pre;
                deleteNode(node);
                map.remove(node.key);
            }
            Node node = new Node(key, value);
            map.put(key, node);
            addToHead(node);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
```

* 

```
class LRUCache {
    //尾插法
    class Node{
        Node pre;
        Node next;
        int key;
        int value;
        public Node(int key, int value){
            this.key = key;
            this.value = value;
        }
    }

    public void deleteNode(Node node){
        node.next.pre = node.pre;
        node.pre.next = node.next;
    }

    public void addToTail(Node node){
        node.next = tail;
        tail.pre.next = node;
        node.pre = tail.pre;
        tail.pre = node;
    }

    public void moveToTail(Node node){
        deleteNode(node);
        addToTail(node);
    }

    Map<Integer,Node> map;
    int size;
    Node head;
    Node tail;

    public LRUCache(int capacity) {
        map = new HashMap<>();
        size = capacity;
        head = new Node(0,0);
        tail = new Node(0,0);
        head.next = tail;
        tail.pre = head;
    }
    
    public int get(int key) {
        if(!map.containsKey(key)) return -1;
        Node node = map.get(key);
        moveToTail(node);
        return node.value;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            Node node = map.get(key);
            node.value = value;
            moveToTail(node);
        }else{
            if(map.size() == size){
                Node prev = head.next;
                deleteNode(prev);
                map.remove(prev.key);
            }
            Node node = new Node(key, value);
            addToTail(node);
            map.put(key, node);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
```

