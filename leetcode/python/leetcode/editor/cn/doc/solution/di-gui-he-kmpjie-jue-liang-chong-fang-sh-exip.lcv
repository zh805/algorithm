## 方法一：递归

递归就很简单了，从t1树的每个节点开始比对是否能够找到完整的t2树就可以了

* 

```
public boolean checkSubTree(TreeNode t1, TreeNode t2) {
        if (t2 == null) return true;
        if (t1 == null) return false;
        return isTreeEql(t1, t2) || checkSubTree(t1.left, t2) || checkSubTree(t1.right, t2);
    }
private boolean isTreeEql(TreeNode t1, TreeNode t2) {
        if (t1 == t2) return true;
        if (t1 == null || t2 == null) return false;
        return t1.val == t2.val && isTreeEql(t1.left, t2.left) && isTreeEql(t1.right, t2.right);
    }
```

时间复杂度分析：最差情况下,t1在小于t2子树高度以上节点都要比对M次，M是t2节点的大小，所以时间复杂度为O（N*M）

## 方法二：使用KMP算法

由于先序序列化可以将一棵树的结构和值信息完全保存，所以可以将t1和t2都进行先序序列化，如果t2的序列化结果是t1序列化结果的子数组，那么就说明t2是t1的一个子树。我们知道KMP算法时间复杂度是O(N)的，但是常数项时间较本题的递归来说要高很多，所以过本题样例的时候表现不如递归。

### 代码实现：

* 

```
//KMP算法解：1.先拿到两个树的先序序列化2.接下来就是看看t1产生的str数组是否能匹配t2产生的match数组
    public static void preSerial(TreeNode head,ArrayList<String> preList){
        if(head==null){
            preList.add("null");
            return;
        }
        preList.add(head.val+"");
        preSerial(head.left,preList);
        preSerial(head.right,preList);
    }
    public static boolean checkSubTree1(TreeNode t1, TreeNode t2) {
        if (t2 == null) return true;
        if (t1 == null) return false;
        ArrayList<String> str = new ArrayList<>();
        preSerial(t1,str);
        ArrayList<String> match = new ArrayList<>();
        preSerial(t2,match);
        return getIndexOf(str,match)!=-1;
    }

    private static int getIndexOf(ArrayList<String> str, ArrayList<String> match) {
        if(match.size()>str.size()) return  -1;
        int x = 0,y = 0;
        int[] nexts = getNextArray(match);
        while (x<str.size()&&y<match.size()){
            if(str.get(x).equals(match.get(y))){
                x++;y++;
            }else if(nexts[y]==-1){
                x++;
            }else{
                y = nexts[y];
            }
        }
        return y==match.size()?x-y:-1;
    }

    private static int[] getNextArray(ArrayList<String> match) {
        if(match.size()==1) return new int[]{-1};
        int[] next = new int[match.size()];
        next[0] = -1;
        next[1] = 0;
        int preNext = 0;
        int cur = 2;
        while (cur<match.size()){
            if(match.get(preNext).equals(match.get(cur))){
                next[cur++] = ++preNext;
            }else if(preNext>0){
                preNext = next[preNext];
            }else{
                next[cur++] = 0;
            }
        }
        return next;
    }
```

![image.png](https://pic.leetcode-cn.com/1615650577-JqCPAL-image.png)
