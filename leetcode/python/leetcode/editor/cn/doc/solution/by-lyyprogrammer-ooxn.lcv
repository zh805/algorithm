### 一、动态规划

* java

```java
class Solution {
    /*
        1.定义：节点个数为i的二叉搜索树种数为dp[i] 以i为根节点的二叉搜索树种树为f[i]
        2.递推公式：dp[n] = f[1] + f[2] +...+ f[n]
                    f[i] = dp[以j为根节点的左子树节点的数量] * dp[以j为根节点的右子树节点的数量] 
                         = dp[j-1]*dp[i-j] 
        3.初始化：
            3.1dp[0] = 1
                空的树也可作为一棵二叉搜索树
                并且在推导过程中也可得知dp[0] = 1
            3.2dp[1] = 1
        4.遍历顺序  
        5.例子
            示例1：首先将这五棵树以紫色的树为轴分为左半边两棵树、中间的树以及右半边的两棵树
                   左半边的两棵树：左子树为空 右子树两个节点 那么总数为dp[0]*dp[2]=1*2=2
                   中间的一棵树：左右子树均为一个节点 那么总数为dp[1]*dp[1] = 1
                   右半边的两棵树：左子树两个节点 右子树为空 那么总数为dp[2]*dp[0]=2*1=2
                   累加以上结果得：dp[3] = dp[0]*dp[2]+dp[1]*dp[1]+dp[2]*dp[0]=5
    */
    public int numTrees(int n) {
        int[] dp = new int[n+1];
        //base case
        dp[0] = 1;
        dp[1] = 1;
        //遍历顺序
        //外层循环控制节点个数[2...n]
        for(int i=2;i<=n;i++) {
            //内层循环控制一棵节点总数为i的二叉搜索树 j节点作为根节点 j->[1,i]
            for(int j=1;j<=i;j++) {
                //dp[以j为根节点的左子树节点的数量] * dp[以j为根节点的右子树节点的数量] 
                dp[i] += dp[j-1] * dp[i-j];
            }
        }
        return dp[n];
    }
}
```

### 二、递归

* java

```java
class Solution {
    //备忘录-用来记录并消除重叠的子问题
    int[][] memo;
    public int numTrees(int n) {
        memo = new int[n+1][n+1];
        return count(1,n);
    }
    
    int count(int low,int high) {
        int res = 0;
        //base case
        //空指针也视为一种情况
        if(low > high) {
            return 1;
        }
        //备忘录中存在结果直接返回
        if(memo[low][high] != 0) {
            return memo[low][high];
        }
        //遍历每一个结点作为根节点
        for(int i=low;i<=high;i++) {
            //左子树的组合数量
            int left = count(low,i-1);
            //右子树的组合数量
            int right = count(i+1,high);
            //相乘
            res += left * right;
        }
        //存入备忘录
        memo[low][high] = res;
        return res;
    }   
}
```

