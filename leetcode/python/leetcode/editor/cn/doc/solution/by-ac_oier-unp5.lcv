## 模拟（分情况讨论）

这是一道麻烦而又没啥意义的题。

需要满足的条件有三个，根据 `password` 的长度 $n$，字符种类数量 $m$，以及相同字符连续长度不低于 $3$ 的情况 $g$（数组 $g$ 的长度为相同字符长度不低于 $3$ 的连续段个数，$g[i]$ 代表第 $i$ 个连续段的长度），进行分情况讨论：

* $n < 6$：长度过短，不满足要求，任何一次「删除」操作都需要额外搭配一个「增加」操作，而这两步操作可以使用「替换」来代替，结果不会变差；同时为了满足长度要求，我们必然要使用到「增加」操作。因此**需要用到「增加」和「替换」操作**，枚举所有的情况发现，最少操作次数最终可以归纳到 $\max(6 - n, 3 - m)$；
* $6 \leqslant n \leqslant 20$：任何的有效的「增加」操作目的只能是为了「破坏连续段长度不低于 $3$」或者「增加字符种类数量」，这两个目的都可以使用「替换」来做到；而任何有效的「删除」操作只能是为了「破坏连续段长度不低于 $3$」，这一目的也可以使用「替换」来做到。因此只**需要用到「替换」操作**，结过不会变差。对于某个 $g[i]$ 而言，我们需要使用  $\left \lfloor \frac{g[i]}{3} \right \rfloor$ 次「替换」操作来满足「连续段长度不能不低于 $3$」的要求，在此基础上再考虑字符种类的问题，最少操作次数最终可以归纳到 $\max(\sum_{i = 0}^{g.length - 1}\left \lfloor \frac{g[i]}{3} \right \rfloor, 3 - m)$；
* $n > 20$：长度过长，不满足要求，任何一次「增加」操作都需要额外搭配一个「删除」操作，**只需要用到「删除」和「替换」操作**，为了满足长度要求，必然用到的「删除」操作可能会影响到最终的「替换」操作，直觉上，应当优先删除那些「连续段长度不低于 $3$」的字符。由于连续段长度 $g[i]$ 与其消耗的「替换」次数的关系为 $\lfloor \frac{g[i]}{3} \rfloor$，在不考虑余数的情况下，每删除 $3$ 个字符，能够连带的减少一次「替换」操作。因此我们可以根据 $g[i]$ 对 $3$ 取模进行统计，得到 $cnts$ 数组（$cnts$ 数组长度为 $3$，其中 $cnts[i] = x$ 含义为在所有「连续段长度不低于 $3$」的连续段中，长度余数为 $i$ 的数量有 $x$ 个），按照余数从小到大的优先级进行同步抵消。

实现上，我们并不需要真正处理出来 $g$ 数组，可以边统计「连续段长度不低于 $3$」边累加需要的「替换」次数。

代码：

* []

```Java
class Solution {
    public int strongPasswordChecker(String password) {
        char[] cs = password.toCharArray();
        int n = cs.length;
        int A = 0, B = 0, C = 0;
        for (char c : cs) {
            if (c >= 'a' && c <= 'z') A = 1;
            else if (c >= '0' && c <= '9') B = 1;
            else C = 1;
        }
        int m = A + B + C;
        if (n < 6) {
            return Math.max(6 - n, 3 - m);
        } else if (n <= 20) {
            int tot = 0;
            for (int i = 0; i < n; ) {
                int j = i;
                while (j < n && cs[j] == cs[i]) j++;
                int cnt = j - i;
                if (cnt >= 3) tot += cnt / 3;
                i = j;
            }
            return Math.max(tot, 3 - m);
        } else {
            int tot = 0;
            int[] cnts = new int[3];
            for (int i = 0; i < n; ) {
                int j = i;
                while (j < n && cs[j] == cs[i]) j++;
                int cnt = j - i;
                if (cnt >= 3) {
                    tot += cnt / 3; cnts[cnt % 3]++;
                }
                i = j;
            }
            int base = n - 20, cur = base;
            for (int i = 0; i < 3; i++) {
                if (i == 2) cnts[i] = tot;
                if (cnts[i] != 0 && cur > 0) {
                    int t = Math.min(cnts[i] * (i + 1), cur);
                    cur -= t; tot -= t / (i + 1);
                }
            }
            return base + Math.max(tot, 3 - m);
        }
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
