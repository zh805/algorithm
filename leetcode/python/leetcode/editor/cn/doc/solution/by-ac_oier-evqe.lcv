## 基本分析

根据题意，题目涉及「单点修改」和「区间查询」，根据 [区间求和问题](https://leetcode-cn.com/problems/range-sum-query-mutable/solution/guan-yu-ge-lei-qu-jian-he-wen-ti-ru-he-x-41hv/) 的总结，可以使用「树状数组」和「线段树」进行求解。

但是留意到 $t$ 的数据范围为 $1e9$，虽然调用次数是 $1e4$，但由于本题是「强制在线」问题，因此我们无法利用「离散化」手段来解决 `MLE`  问题，而要使用「线段树（动态开点）」来解决。

---

## 线段树（动态开点）

动态开点的优势在于，不需要事前构造空树，而是在插入操作 `update` 和查询操作 `query` 时根据访问需要进行「开点」操作。由于我们不保证查询和插入都是连续的，因此对于父节点 $u$ 而言，我们不能通过 `u << 1` 和 `u << 1  | 1` 的固定方式进行访问，而要将节点 $tr[u]$ 的左右节点所在 `tr` 数组的下标进行存储，分别记为 `ls` 和 `rs` 属性。对于 $tr[u].ls = 0$ 和 $tr[u].rs = 0$ 则是代表子节点尚未被创建，当需要访问到它们，而又尚未创建的时候，则将其进行创建。

线段树的插入和查询都是 $\log{n}$ 的（如果涉及区间修改，则由懒标记来确保 $\log{n}$ 复杂度），因此我们在单次操作的时候，最多会创建数量级为 $\log{n}$ 的点，因此空间复杂度为 $O(m\log{n})$，而不是 $O(4 * n)$，而开点数的预估需不能仅仅根据 $\log{n}$ 来进行，还要对具体常数进行分析，才能得到准确的点数上界。

动态开点相比于原始的线段树实现，本质仍是使用「满二叉树」的形式进行存储，只不过是按需创建区间，如果我们是按照连续段进行查询或插入，最坏情况下仍然会占到 $4 * n$ 的空间，因此盲猜 $\log{n}$ 的常数在 $4$ 左右，保守一点可以直接估算到 $6$，因此我们可以估算点数为 $6 * m * \log{n}$，其中 $n = 1e9$ 和 $m = 1e4$ 分别代表值域大小和查询次数。

当然一个比较实用的估点方式可以「尽可能的多开点数」，利用题目给定的空间上界和我们创建的自定义类（结构体）的大小，尽可能的多开（ `Java` 的 $128M$ 可以开到 $5 * 10^6$ 以上）。

代码：

* []

```Java
class RecentCounter {
    class Node {
        // ls 和 rs 分别代表当前节点（区间）的左右子节点在 tr 的下标
        // val 代表在当前节点（区间）所包含的数的个数
        int ls, rs, val;
    }
    int N = (int)1e9, M = 800010, idx = 1;
    Node[] tr = new Node[M];
    void update(int u, int lc, int rc, int x, int v) {
        if (lc == x && rc == x) {
            tr[u].val += (rc - lc + 1) * v;
            return ;
        }
        lazyCreate(u);
        int mid = lc + rc >> 1;
        if (x <= mid) update(tr[u].ls, lc, mid, x, v);
        else update(tr[u].rs, mid + 1, rc, x, v);
        pushup(u);
    }
    int query(int u, int lc, int rc, int l, int r) {
        if (l <= lc && rc <= r) return tr[u].val;
        lazyCreate(u);
        int mid = lc + rc >> 1, ans = 0;
        if (l <= mid) ans = query(tr[u].ls, lc, mid, l, r);
        if (r > mid) ans += query(tr[u].rs, mid + 1, rc, l, r);
        return ans;
    }
    void lazyCreate(int u) {
        if (tr[u] == null) tr[u] = new Node();
        if (tr[u].ls == 0) {
            tr[u].ls = ++idx;
            tr[tr[u].ls] = new Node();
        }
        if (tr[u].rs == 0) {
            tr[u].rs = ++idx;
            tr[tr[u].rs] = new Node();
        }
    }
    void pushup(int u) {
        tr[u].val = tr[tr[u].ls].val + tr[tr[u].rs].val;
    }
    public int ping(int t) {
        update(1, 1, N, t, 1);
        return query(1, 1, N, t - 3000, t);
    }
}
```

* 时间复杂度：令 `ping` 的调用次数为 $m$，值域大小为 $n$，线段树的插入和查询复杂度均为 $O(\log{n})$
* 空间复杂度：$O(m * \log{n})$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
