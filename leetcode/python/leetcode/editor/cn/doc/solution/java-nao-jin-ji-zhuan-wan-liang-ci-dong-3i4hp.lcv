### 算法思路：

本题是 [剑指 Offer II 089. 房屋偷盗](https://leetcode-cn.com/problems/Gu0c2T/) 的进阶版，虽然这么说，问题的本质却并没有发生什么变化。

这题更像一个脑筋急转弯的题目，**我们只需要对`nums[0:n-2]`和`nums[1:n-1]`(闭区间)分别做一次上述题目同款的动态规划，返回较大值即可**。

下面我们来证明为什么这么做是对的。首先我们定义方法`dynamic(nums, l, r)`，它返回nums[l, r)范围内能够偷窃的最大金额。例如`dynamic(nums, 0, n - 1)`就是返回允许偷第一家，但不允许偷最后一家的最大金额。那么此时**你可能会疑惑：第一家一定会被偷吗，或者说这个最大金额是不是一定包含第一家的？** 如果你理解了打家劫舍的解题过程，显然回答是**不一定**的，也就是说第一家可能被偷也可能没被偷。那么进一步**你可能会觉得：如果第一家没被偷，那我们是不是可以尝试偷一下最后一家，这样偷窃金额可能会更大。** 没错！我们确实可以作这样的尝试。综上，我们对`dynamic(nums, 0, n - 1)`可以作以下两个假设：

- 假设第一家被偷了，由于我们不允许其偷最后一家，所以结果是符合题意的；
- **假设第一家没被偷，意味着我们可以偷最后一家**，而这种情况就在`dynamic(nums, 1, n)`里。

反过来，也可以用同样的思考过程去理解`dynamic(nums, 1, n)`。

所以，`max(dynamic(nums, 0, n - 1), dynamic(nums, 1, n))`就是最终答案。

* java

```java
class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n <= 3) return Arrays.stream(nums).max().getAsInt();
        return Math.max(dynamic(nums, 0, n - 1), dynamic(nums, 1, n));
    }
    
    public int dynamic(int[] nums, int l, int r) {
        int n = nums.length;
        int[] dp = new int[n + 1];
        dp[l] = 0;
        dp[l + 1] = nums[l];
        for (int i = l + 2; i <= r; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i - 1]);
        }
        return dp[r];
    } 
}
```

