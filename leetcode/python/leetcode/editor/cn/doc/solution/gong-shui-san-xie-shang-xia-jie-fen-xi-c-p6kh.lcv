## 上下界分析 + 差分应用

为了方便，令 $n$ 为 $nums$ 长度（中文的数据范围是错的，数组长度应该是 $10^5$，不是 $20000$）。

对于给定的 $nums$ 而言，有效的轮调范围为 $[0, n - 1]$，即对于任意 $nums[i]$ 而言，可取的下标共有 $n$ 种。

假定当前下标为 $i$，轮调次数为 $k$，那么轮调后下标为 $i - k$，当新下标为负数时，相当于 $nums[i]$ 出现在比原数组更“靠后”的位置，此时下标等价于 $(i - k + n) \mod n$。

考虑什么情况下 $nums[i]$ 能够得分？

首先新下标的取值范围为 $[0, n - 1]$，即有 $0 \leqslant i - k \leqslant n - 1$ 。由此可分析出 $k$ 的取值范围为：

$$
0 \leqslant i - k \Leftrightarrow k \leqslant i
$$

$$
i - k \leqslant n - 1 \Leftrightarrow i - (n - 1) \leqslant k
$$

即由新下标取值范围可知 $k$ 的上下界分别为 $i$ 和 $i - (n - 1)$。

同时为了满足得分定义，还有 $nums[i] \leqslant i - k$，进行变形可得：

$$
nums[i] \leqslant i - k \Leftrightarrow k \leqslant i - nums[i]
$$

此时我们有两个关于 $k$ 的上界 $k \leqslant i$ 和 $k \leqslant i - nums[i]$，由于 $nums[i]$ 取值范围为 $[0, n)$，则有 $i - nums[i] \leqslant i$，由于必须同时满足「合法移动（有效下标）」和「能够得分」，我们仅考虑范围更小（更严格）由 $nums[i] \leqslant i - k$ 推导而来的上界 $k \leqslant i - nums[i]$ 即可。

综上，$nums[i]$ 能够得分的 $k$ 的取值范围为 $[i - (n - 1), i - nums[i]]$。

最后考虑 $[i - (n - 1), i - nums[i]]$（均进行加 $n$ 模 $n$ 转为正数）什么情况下为合法的连续段：

* 当 $i - (n - 1) \leqslant i - nums[i]$ 时，$[i - (n - 1), i - nums[i]]$ 为合法连续段；
* 当 $i - (n - 1) > i - nums[i]$ 时，根据负数下标等价于 $(i - k + n) \mod n$，此时 $[i - (n - 1), i - nums[i]]$ 等价于 $[0, i - nums[i]]$ 和 $[i - (n - 1), n - 1]$ 两段。

至此，我们分析出原数组的每个 $nums[i]$ 能够得分的 $k$ 的取值范围，假定取值范围为 $[l, r]$，我们可以对 $[l, r]$ 进行 $+1$ 标记，代表范围为 $k$ 能够得 $1$ 分，当处理完所有的 $nums[i]$ 后，找到标记次数最多的位置 $k$ 即是答案。

标记操作可使用「差分」实现（不了解差分的同学，可以先看前置🧀：[差分入门模板题](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247490329%26idx%3D1%26sn%3D6d448a53cd722bbd990fda82bd262857%26chksm%3Dfd9cb006caeb3910758522054564348b7eb4bde333889300bd5d249950be12a5b990b5d2c059%26token%3D168273153%26lang%3Dzh_CN%23rd)，里面讲解了差分的两个核心操作「区间修改」&「单点查询」），而找标记次数最多的位置可对差分数组求前缀和再进行遍历即可。

代码：

* []

```Java
class Solution {
    static int N = 100010;
    static int[] c = new int[N];
    void add(int l, int r) {
        c[l] += 1; c[r + 1] -= 1;
    }
    public int bestRotation(int[] nums) {
        Arrays.fill(c, 0);
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            int a = (i - (n - 1) + n) % n, b = (i - nums[i] + n) % n;
            if (a <= b) {
                add(a, b);
            } else {
                add(0, b);
                add(a, n - 1);
            }
        }
        for (int i = 1; i <= n; i++) c[i] += c[i - 1];
        int ans = 0, k = c[0];
        for (int i = 1; i <= n; i++) {
            if (c[i] > k) {
                k = c[i]; ans = i;
            }
        }
        return ans;
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 同类型加餐

[区间求和问题 の 差分入门模板题](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247490329%26idx%3D1%26sn%3D6d448a53cd722bbd990fda82bd262857%26chksm%3Dfd9cb006caeb3910758522054564348b7eb4bde333889300bd5d249950be12a5b990b5d2c059%26token%3D168273153%26lang%3Dzh_CN%23rd)

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
