## 二分 + 前缀和

对于任意一个查询 $[a, b]$ 而言，我们需要统计所有左边和右边能够找到蜡烛的盘子数量。

一个自然的想法是：**找到区间 $[a, b]$ 两边缘的蜡烛，分别记为 $c$ 和 $d$，显然区间 $[c, d]$ 内的盘子都是需要被统计的。**

因此，我们可以对字符串 `s` 进行从前往后的扫描，将所有的蜡烛下标添加到数组（数组严格递增），并预处理出盘子的「前缀和」数组。

然后处理询问时的「找区间 $[a, b]$ 边缘蜡烛」操作可通过对数组「二分」来做，而「查询区间 $[c, d]$ 内的盘子数量」操作可直接查询「前缀和」数组。

代码：

* []

```Java
class Solution {
    public int[] platesBetweenCandles(String s, int[][] qs) {
        char[] cs = s.toCharArray();
        int n = cs.length, m = qs.length;
        int[] ans = new int[m], sum = new int[n + 1];
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (cs[i] == '|') list.add(i);
            sum[i + 1] = sum[i] + (cs[i] == '*' ? 1 : 0);
        }
        if (list.size() == 0) return ans;
        for (int i = 0; i < m; i++) {
            int a = qs[i][0], b = qs[i][1];
            int c = -1, d = -1;
            // 找到 a 右边最近的蜡烛
            int l = 0, r = list.size() - 1;
            while (l < r) {
                int mid = l + r >> 1;
                if (list.get(mid) >= a) r = mid;
                else l = mid + 1;
            }
            if (list.get(r) >= a) c = list.get(r);
            else continue;
            // 找到 b 左边最近的蜡烛
            l = 0; r = list.size() - 1;
            while (l < r) {
                int mid = l + r + 1 >> 1;
                if (list.get(mid) <= b) l = mid;
                else r = mid - 1;
            }
            if (list.get(r) <= b) d = list.get(r);
            else continue;
            if (c <= d) ans[i] = sum[d + 1] - sum[c];
        }
        return ans;
    }
}
```

* 时间复杂度：令 `s` 的长度为 $n$，`qs` 长度为 $m$。统计所有的蜡烛并存入 `list` 的复杂度为 $O(n)$；预处理前缀和数组复杂度为 $O(n)$；处理单个询问需要进行两次二分（蜡烛数量最多为 $n$），复杂度为 $O(n\log{n})$，共有 $m$ 个询问需要处理，复杂度为 $O(m * \log{n})$。整体复杂度为 $O(n + m\log{n})$
* 空间复杂度：$O(n)$

---

## 前缀和

更进一步，在给定 `s` 的前提下，每个位置其左边和右边最近的蜡烛唯一确定。

我们可以在预处理前缀和的同时，预处理每个位置左右最近的蜡烛下标，从而省去每次二分。

代码：

* []

```Java
class Solution {
    public int[] platesBetweenCandles(String s, int[][] qs) {
        char[] cs = s.toCharArray();
        int n = cs.length, m = qs.length;
        int[] l = new int[n], r = new int[n];
        int[] sum = new int[n + 1];
        for (int i = 0, j = n - 1, p = -1, q = -1; i < n; i++, j--) {
            if (cs[i] == '|') p = i;
            if (cs[j] == '|') q = j;
            l[i] = p; r[j] = q;
            sum[i + 1] = sum[i] + (cs[i] == '*' ? 1 : 0);
        }
        int[] ans = new int[m];
        for (int i = 0; i < m; i++) {
            int a = qs[i][0], b = qs[i][1];
            int c = r[a], d = l[b];
            if (c != -1 && c <= d) ans[i] = sum[d + 1] - sum[c];
        }
        return ans;
    }
}
```

* 时间复杂度：$O(n + m)$
* 空间复杂度：$O(n)$

---

## 同类题加餐

同样由「前缀和 & 二分」结合的经典面试题还有：[难度 2.5/5，一道可以抖机灵的经典笔试题](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247490303%26idx%3D1%26sn%3D401cef134d0ba804d18d4173a50ad24f%26chksm%3Dfd9cb1e0caeb38f643434ed67135d5144443f22795e9b126ff5d521ce47cf7f41972ae1ba5f9%26token%3D168273153%26lang%3Dzh_CN%23rd) 🍭

或是加练如下「前缀和」板子题：

| 题目                                                         | 题解                                                         | 难度 | 推荐指数 |
| ------------------------------------------------------------ | ------------------------------------------------------------ | ---- | -------- |
| [304. 二维区域和检索 - 矩阵不可变](https://leetcode-cn.com/problems/range-sum-query-2d-immutable/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/range-sum-query-2d-immutable/solution/xia-ci-ru-he-zai-30-miao-nei-zuo-chu-lai-ptlo/) | 中等 | 🤩🤩🤩🤩🤩    |
| [303. 区域和检索 - 数组不可变](https://leetcode-cn.com/problems/range-sum-query-immutable/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/range-sum-query-immutable/solution/sha-shi-qian-zhui-he-ya-tu-jie-qian-zhui-0rla/) | 简单 | 🤩🤩🤩🤩🤩    |
| [525. 连续数组](https://leetcode-cn.com/problems/contiguous-array/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/contiguous-array/solution/gong-shui-san-xie-qian-zhui-he-ha-xi-bia-q400/) | 中等 | 🤩🤩🤩🤩     |
| [724. 寻找数组的中心下标](https://leetcode-cn.com/problems/find-pivot-index/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/find-pivot-index/solution/shi-yong-shao-bing-ji-qiao-liang-bian-qi-vkju/) | 简单 | 🤩🤩🤩🤩🤩    |
| [1004. 最大连续1的个数 III](https://leetcode-cn.com/problems/max-consecutive-ones-iii/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/max-consecutive-ones-iii/solution/san-chong-jie-fa-cong-dong-tai-gui-hua-d-gxks/) | 中等 | 🤩🤩🤩      |
| [1154. 一年中的第几天](https://leetcode-cn.com/problems/day-of-the-year/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/day-of-the-year/solution/gong-shui-san-xie-jian-dan-qian-zhui-he-lwo2g/) | 简单 | 🤩🤩🤩🤩     |
| [1480. 一维数组的动态和](https://leetcode-cn.com/problems/running-sum-of-1d-array/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/running-sum-of-1d-array/solution/gong-shui-san-xie-yi-wei-qian-zhui-he-mo-g8hn/) | 简单 | 🤩🤩🤩🤩🤩    |
| [1588. 所有奇数长度子数组的和](https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/solution/gong-shui-san-xie-yi-ti-shuang-jie-qian-18jq3/) | 简单 | 🤩🤩🤩🤩🤩    |

**注：以上目录整理来自 [wiki](https://github.com/SharingSource/LogicStack-LeetCode/wiki/前缀和)，任何形式的转载引用请保留出处。**

---

## 全家福

在共同走过的 $400$ 天里，感谢有你们 ❤️❤️

咔嚓，全家福 Get 🎉（也感谢照片以外，帮我们拿相机的大家 🤣

![WechatIMG2259.jpeg](https://pic.leetcode-cn.com/1646692295-xgTKqc-WechatIMG2259.jpeg)
![WechatIMG2264.jpeg](https://pic.leetcode-cn.com/1646692412-LhIrtt-WechatIMG2264.jpeg)
![WechatIMG2261.jpeg](https://pic.leetcode-cn.com/1646692307-fZLrix-WechatIMG2261.jpeg)
![WechatIMG2265.jpeg](https://pic.leetcode-cn.com/1646692442-AZYiQv-WechatIMG2265.jpeg)
![WechatIMG2263.jpeg](https://pic.leetcode-cn.com/1646692323-TCJFiD-WechatIMG2263.jpeg)

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
