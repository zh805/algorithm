### 位运算原始思路回顾

- 首先请理解官方题解中**方法三：位运算**的解法。（可以点击链接看官方题解，也可以看这里回顾）
  [https://leetcode-cn.com/problems/set-mismatch/solution/cuo-wu-de-ji-he-by-leetcode-solution-1ea4/](https://leetcode-cn.com/problems/set-mismatch/solution/cuo-wu-de-ji-he-by-leetcode-solution-1ea4/)
- 记n为nums的长度。
- 设重复的元素为x，缺失的元素为y（$x\neq y,0<x,y\le n$），
- 那么解法分为以下4步。

1. 取nums数组和1~n的所有元素累异或的值为：`xor=x^y`
2. 取xor的二进制最低位1的二进制数lowbit：`lowbit=xor&(-xor)`。
3. 以`lowbit&a==0`为过滤器（a为数组中的每个元素），将`nums[]`数组和`[1,2,...,n]`数组中的数分为两部分，使得x和y分别在其中一部分。（其实取任意一位1也是可以的，但那样不如取最低位1的便捷）

- 再将两部分异或起来，得到的两个值：
  `a0`（由`lowbit&a==0`过滤）和
  `a1`（由`lowbit&a!=0`过滤）必定是由x和y组成。因为除了x和y之外的1~n中的元素都各出现两次，异或得0。而重复的x出现3次异或为x，缺失的y出现一次异或为y。

4. 最后只要确定哪个是x哪个是y，官方题解是检查nums，出现的那个肯定是x。

#### 位运算1，（按照“官方题解方法三的解法”）

* python3

```python3
# 执行用时：88 ms, 在所有 Python3 提交中击败了26.25%的用户
# 内存消耗：15.9 MB, 在所有 Python3 提交中击败了60.03%的用户
import operator
from functools import reduce
class Solution:
    def findErrorNums(self, nums: List[int]) -> List[int]:
        # reduce(op , Iterable , init): 以init为初值，遍历Iterable每个元素x，执行 init=init op x，最后返回init。
        xor_nums=reduce(operator.xor,nums,0)    # nums 全部元素累异或
        xor_1to_n=reduce(operator.xor,range(1,len(nums)+1),0)   # [1,2,...,n] 全部元素累异或
        xor=xor_nums^xor_1to_n  # 其值= x ^ y，x是重复的元素，y是缺失的元素
        lowbit =xor&(-xor)  # 取其二进制最低位1（实际上只要找到一个区分x和y的特征即可，不一定是要最低位1，只是取这个最方便）
        a0=a1=0
        for i,a in enumerate(nums):
            if a&lowbit :
                a1^=a
            else:
                a0^=a
            if (i+1)&lowbit :
                a1^=i+1
            else:
                a0^=i+1
        # 此时 集合{a0,a1}==集合{x,y}，所以还要分清楚哪个对应哪个
        for a in nums:
            if a==a0:
                return [a0,a1]
        return [a1,a0]
```

### 改进方案

#### ①想办法比较x和y的大小

- 相信很多人都能想到第4步可以用对`nums[]`求和对比1~n的**等差数列**求和的大小来确定x和y谁大，如此也就确定了`a0,a1`与`x,y`的对应关系。
  $\sum_{i=0}^{n-1}nums[i]-\sum_{i=1}^{n}i=x-y$
  $\sum_{i=1}^{n}i=\frac{n\cdot(n+1)}{2}$
- 而对`nums[]`求和可以在第一趟遍历时顺便完成。
- 但这个方案不见得一定能提高第4步的速度。要结合编程语言的情况来使用。

#### ②连续整数累异或的规律

- 既然前n项和有通项公式以$O(1)$时间复杂度解决，那么各位有无想过前n个自然数的累异或也有通项公式呢？
- 记xor(k)为前k个自然数的累异或值：`xor(k)=0^1^2^...^(k-1)`
- 规律发掘往往是自下而上的，那么直接用计算机算一算前k个自然数的累异或规律吧。
- 第一页是执行的结果，3列分别为k(十进制)，k（二进制），从0~k-1的异或值（二进制）。第二页为生成执行结果的python代码。

* []

```输出结果
k	k(bit)		xor(k)
0	00000000	00000000
1	00000001	00000000
2	00000010	00000001
3	00000011	00000011
4	00000100	00000000
5	00000101	00000100
6	00000110	00000001
7	00000111	00000111
8	00001000	00000000
9	00001001	00001000
10	00001010	00000001
11	00001011	00001011
12	00001100	00000000
13	00001101	00001100
14	00001110	00000001
15	00001111	00001111
16	00010000	00000000
17	00010001	00010000
18	00010010	00000001
19	00010011	00010011
20	00010100	00000000
21	00010101	00010100
22	00010110	00000001
23	00010111	00010111
24	00011000	00000000
25	00011001	00011000
26	00011010	00000001
27	00011011	00011011
28	00011100	00000000
29	00011101	00011100
30	00011110	00000001
31	00011111	00011111
32	00100000	00000000

Process finished with exit code 0

```

* []

```python
print("k\tk(bit)\t\txor(k)")
xor=0
for k in range(33):
    print("{:d}\t{:08b}\t{:08b}".format(k,k,xor))
    xor^=k
```

- 观察规律发现当4能整除k时，`xor(k)`总是为0。
- 这意味着`xor(k)=m^m+1^...^k-1`而m可以取任意满足$m\le k$,且4能整除m的数。注意xor(k)不含异或k的操作，求1~n的累异或值其实是xor(n+1)，所以取`m=(n+1)-(n+1)%4`从m~n进行累异或，结果为初始值0，至多只需要求3个数的异或值！
- 取`m=n&(~0x03)`（n的低2位置零）更能反映本质！
- 当然也可以将n取4的余数分为4种情况来讨论。

#### ③位限定时整数累异或的规律

- 规律②可以解决第1步，但是不能解决第3步！
- 要求得1~n中，限定lowbit为0（或1）部分的异或值，那就不是连续的整数序列了。
- 其实只要求得lowbit为0的元素的异或值a0，那么a1可以用整体异或得到`a1=a0^xor`,由`xor=a0^a1`和**异或的自反律**可得。（官方题解居然没发现这么明显的定理来减少计算量？还是为了对称美观？）
- 第一页是执行的结果，首行为k和lowbit的二进制值。从第二行开始，第一列是k值，其他列为1~k-1中对应该列lowbit为0的元素的累异或值，其中值为0直接按十进制输出。第二页为生成执行结果的python代码。

* []

```执行结果
k	       1	      10	     100	    1000	   10000
0	       0	       0	       0	       0	       0
1	       0	       0	       0	       0	       0
2	       0	00000001	00000001	00000001	00000001
3	00000010	00000001	00000011	00000011	00000011
4	00000010	00000001	       0	       0	       0
5	00000110	00000101	       0	00000100	00000100
6	00000110	       0	       0	00000001	00000001
7	       0	       0	       0	00000111	00000111
8	       0	       0	       0	       0	       0
9	00001000	00001000	00001000	       0	00001000
10	00001000	00000001	00000001	       0	00000001
11	00000010	00000001	00001011	       0	00001011
12	00000010	00000001	       0	       0	       0
13	00001110	00001101	       0	       0	00001100
14	00001110	       0	       0	       0	00000001
15	       0	       0	       0	       0	00001111
16	       0	       0	       0	       0	       0
17	00010000	00010000	00010000	00010000	       0
18	00010000	00000001	00000001	00000001	       0
19	00000010	00000001	00010011	00010011	       0
20	00000010	00000001	       0	       0	       0
21	00010110	00010101	       0	00010100	       0
22	00010110	       0	       0	00000001	       0
23	       0	       0	       0	00010111	       0
24	       0	       0	       0	       0	       0
25	00011000	00011000	00011000	       0	       0
26	00011000	00000001	00000001	       0	       0
27	00000010	00000001	00011011	       0	       0
28	00000010	00000001	       0	       0	       0
29	00011110	00011101	       0	       0	       0
30	00011110	       0	       0	       0	       0
31	       0	       0	       0	       0	       0
32	       0	       0	       0	       0	       0

Process finished with exit code 0

```

* []

```python
lowbits=[1<<i for i in range(5)]
print("k\t"+'\t'.join("{:8b}".format(a) for a in lowbits))
xor=[0]*len(lowbits)
for k in range(33):
    print("%d"%(k),end='')
    for i,bit in enumerate(lowbits):
        print("\t{:08b}".format(xor[i]) if xor[i]!=0 else "\t       0",end='')
        if 0==(k&bit):
            xor[i]^=k
    print('')

```

- 观察规律后发现，当8能整除k时，累异或的结果总是0，所以只要累异或`n-(n+1)%8`到n之间，满足lowbit过滤条件的结果即可。
- 其实当lowbit>=4时，当4能整除k时，累异或的结果总是0，只要套用即可。
- 对于`lowbit&a!=0`的情况，同样符合上述规律，代码中把`if 0==(k&bit):`改为`if 0!=(k&bit):`即可。

#### 连续异或规律的内在逻辑

- 对于规律②，若只看低2位，相邻4个数相异或的结果必然是0。因为低2位一共就4种结果，每一位的0和1都各出现两次，全部异或起来自然是0。

* 

```
? 0 0
? 0 1
? 1 0
? 1 1
```

- 若考虑高位，当高位完全相同时，只要是偶数个相异或，结果也是0。
- 所以当m能被4整除时，m的低2位全是0，也就有`m^(m+1)^(m+2)^(m+3)==0`恒成立了。
- 对于规律③，情况就复杂一些，要分`lowbit=1`、`lowbit=2`和`lowbit>=4`三种情况，但其规律的内在逻辑如出一辙。

#### 位运算2（应用规律②、③）

* []

```python3
# 执行用时：56 ms, 在所有 Python3 提交中击败了81.29%的用户
# 内存消耗：15.8 MB, 在所有 Python3 提交中击败了63.18%的用户
import operator
from functools import reduce
class Solution:
    def findErrorNums(self, nums: List[int]) -> List[int]:
        k=len(nums)+1 # k==n+1
        # reduce(op , Iterable , init): 以init为初值，遍历Iterable每个元素x，执行 init=init op x，最后返回init。
        xor_nums=reduce(operator.xor,nums,0)    # nums 全部元素累异或
        # 用连续整数累异或周期律减少计算量（规律②）
        xor_1to_n=reduce(operator.xor,range(k-k%4,k),0)   # [1,2,...,n] 全部元素累异或
        xor=xor_nums^xor_1to_n  # 其值= x ^ y，x是重复的元素，y是缺失的元素
        lowbit =xor&(-xor)  # 取其二进制最低位1（实际上只要找到一个区分x和y的特征即可，不一定是要最低位1，只是取这个最方便）
        a0=0 # a0,a1 是 nums+[1,2,...,n]中按lowbit相与是否为0分为两组的异或值。
        for a in nums:
            if 0==a&lowbit: a0^=a
        # 用规律③减少计算量
        for a in range(k-k%(8 if lowbit<4 else 4),k):  # 等价于 从1,2,...,n遍历。
            if 0==a&lowbit: a0^=a
        a1=a0^xor   # 由 xor=a0^a1 异或的自反律可得。
        # 此时 集合{a0,a1}==集合{x,y}，所以还要分清楚哪个对应哪个
        return [a0,a1] if a0 in nums else [a1,a0]
```

* []

```c
int* findErrorNums(int* nums, int numsSize, int* returnSize) {
    int* ret = malloc(sizeof(int) * 2);
    int xor = ((numsSize&1)?0:numsSize)|(1&((numsSize+1)/2));    //初始值为 1~n的累异或，用规律②实现O(1)时间复杂度。
    int sum = 0;
    for (int i = 0; i < numsSize; i++) {
        xor ^= nums[i];
        sum += nums[i];
    }
    int lowbit = xor & (-xor);
    int a0 = 0,a1;
    for (int i = 0; i < numsSize; i++) {
        if ((nums[i] & lowbit) == 0) {
            a0 ^= nums[i];
        }
    }
    for (int i = numsSize&((lowbit<4)?(~7):(~3)); i <= numsSize; i++) {
        if ((i & lowbit) == 0) {
            a0 ^= i;
        }
    }
    a1=a0 ^ xor;
    *returnSize = 2;
    if((sum<numsSize*(numsSize+1)/2)==(a0<a1)){
        ret[0] = a0, ret[1] = a1;
    } else{
        ret[0] = a1, ret[1] = a0;
    }
    return ret;
}
```

* []

```python3
# 执行用时：60 ms, 在所有 Python3 提交中击败了70.72%的用户
# 内存消耗：15.8 MB, 在所有 Python3 提交中击败了62.21%的用户
import operator
from functools import reduce
class Solution:
    def findErrorNums(self, nums: List[int]) -> List[int]:
        n=len(nums)
        n1=n+1
        # 利用规律②的4种取余情况得到 1,2,...,n的累异或作为初值，再异或上nums全部元素
        xor=reduce(operator.xor,nums,(n if 0==(n&1) else 0)|(1&(n1>>1)))    # 其值= x ^ y，x是重复的元素，y是缺失的元素
        lowbit =xor&(-xor)  # 取其二进制最低位1（实际上只要找到一个区分x和y的特征即可，不一定是要最低位1，只是取这个最方便）
        # a0,a1 是 nums+[1,2,...,n]中按lowbit相与是否为0分为两组的异或值。
        ft=lambda a:0==a&lowbit # 只有满足ft为True的元素才会迭代
        a0=reduce(operator.xor,filter(ft,nums),0) ^ reduce(operator.xor,
            filter(ft,range(n&((~0b111) if lowbit<4 else (~0b11)),n1) ),0)    # 从n的低b位置零~n的数异或，当lowbit<4取b=3，否则b=2
        a1=a0^xor   # 由 xor=a0^a1 异或的自反律可得。
        # 此时 集合{a0,a1}==集合{x,y}，所以还要分清楚哪个对应哪个
        return [a0,a1] if a0 in nums else [a1,a0]
```

### 后记

笔者当时想原地解法时，自己就想出来求得“**重复元素**与**缺失元素**的**异或值**”的方法，也知道原地置换的方法（见另一篇题解），但想不出只多遍历一遍就能解出**重复元素**和**缺失元素**各为几何的解法。
参考官方题解之后，也就那样，还是要遍历三遍。
但是官方题解给了笔者基本思路，只要从中找出改进的方法即可。
