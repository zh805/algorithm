## 数据结构

题目要统计处理任务数最多的机器，首先容易想到使用「哈希表」统计每个机台处理的任务数，利用机台数量 $k$ 最多不超过 $10^5$，我们可以开一个静态数组 `cnts` 来充当哈希表，同时维护一个当前处理的最大任务数量 `max`，最终所有满足 $cnst[i] = \max$ 的机台集合即是答案。

再根据「每个任务有对应的开始时间和持续时间」以及「任务分配规则」，容易想到使用优先队列（堆）和有序集合（红黑树）来进行维护。

具体的，利用「每个任务有对应的开始时间和持续时间」，我们使用优先队列（堆）维护二元组 $(idx, endTime)$，其中 $idx$ 为机器编号，$endTime$ 为当前机台所处理任务的结束时间（也就是该机台最早能够接受新任务的时刻），对于每个 $arrival[i]$ 而言（新任务），我们先从优先队列中取出所有 $endTime < arrival[i]$ 的机台 $idx$，加入「空闲池」，然后再按照「任务分配规则」从空闲池子中取机台，若取不到，则丢弃该任务。

由于「任务分配规则」是优先取大于等于 `i % k` 的最小值，若取不到，再取大于等于 $0$ 的最小值。因此我们的「空闲池」最好是支持「二分」的有序集合，容易想到基于「红黑树」的 `TreeSet` 结构。

代码：

* []

```Java
class Solution {
    static int N = 100010;
    static int[] cnts = new int[N];
    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {
        Arrays.fill(cnts, 0);
        int n = arrival.length, max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        PriorityQueue<int[]> busy = new PriorityQueue<>((a,b)->a[1]-b[1]);
        TreeSet<Integer> free = new TreeSet<>();
        for (int i = 0; i < k; i++) free.add(i);
        for (int i = 0; i < n; i++) {
            int start = arrival[i], end = start + load[i];
            while (!busy.isEmpty() && busy.peek()[1] <= start) free.add(busy.poll()[0]);
            Integer u = free.ceiling(i % k);
            if (u == null) u = free.ceiling(0);
            if (u == null) continue;
            free.remove(u);
            busy.add(new int[]{u, end});
            max = Math.max(max, ++cnts[u]);
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            if (cnts[i] == max) ans.add(i);
        }
        return ans;
    }
}
```

* 时间复杂度：令任务数量为 $n$，机台数量为 $k$，起始将所有机台存入 `TreeSet`，复杂度为 $O(k\log{k})$；每次处理新的 $arrival[i]$ 时，先从优先队列取出可接受新任务的机台，存入 `TreeSet`，然后从 `TreeSet` 中取出最多一个的机台来完成任务，其中从 `TreeSet` 中取出机台最多调用两次的 `ceiling` 操作，复杂度为 $O(\log{k})$，这部分的整体复杂度为 $O(n\log{k})$；统计处理任务数达到 `max` 的机台集合复杂度为 $O(k)$；整体复杂度为 $O((k + n)\log{k})$
* 空间复杂度：$O(k)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
