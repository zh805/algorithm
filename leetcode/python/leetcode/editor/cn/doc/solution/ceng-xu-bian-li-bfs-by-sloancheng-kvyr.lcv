### 解题思路

BFS按照题目要求来做判断就行了。

### 代码

* java

```java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isEvenOddTree(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        int lay = 0;
        while(!q.isEmpty()){
            int size = q.size();
            List<Integer> ls = new ArrayList<>();
            for(int i = 0; i < size; ++i){
                TreeNode node = q.poll();
                //偶数层节点值都是奇数
                if(lay%2==0){
                    if(node.val % 2 == 0) return false;
                    ls.add(node.val);
                    if(node.left != null) q.offer(node.left);
                    if(node.right != null) q.offer(node.right);
                //奇数层节点值都是偶数
                }else if(lay%2==1){
                    if(node.val % 2 == 1) return false;
                    ls.add(node.val);
                    if(node.left != null) q.offer(node.left);
                    if(node.right != null) q.offer(node.right);
                }
            }
            //判断条件二和条件三是否满足
            if(!func(lay, ls)) return false;
            lay++;
        }
        return true;
    }

    public boolean func(int lay, List<Integer> ls){
        if(lay == 0) return true;
        if(lay%2==0){
            for(int i = 1; i < ls.size(); ++i){
                if(ls.get(i) <= ls.get(i-1)) return false;
            }
            return true;
        }
        for(int i = 1; i < ls.size(); ++i){
            if(ls.get(i) >= ls.get(i-1)) return false;
        }
        return true;
    }
}
```

