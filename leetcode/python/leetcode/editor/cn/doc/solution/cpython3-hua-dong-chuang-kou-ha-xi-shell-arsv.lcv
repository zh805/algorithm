思路心得：
看了几个大佬的解，代码都很简洁，但是对读代码的人还是不够足够足够的友好，希望看个一两遍就能读懂

我再自己总结一下思路和框架

1.其实就是套了滑动窗口+哈希表统计比较

2.因为本题，单词的个数和单词的长度是固定的

所以可以用排序算法中shell希尔排序的想法

最外层for循环遍历的是start点，delta是单词的长度  这里delta步长就不用变来变去了

比shell排序少了最外层的for循环，把delta /= 2 而已

3.感觉刷题还是多总结套路吧。滑动窗口和shell排序的思想居然结合到一块儿了，很神奇

* []

```python3
class Solution:
    def findSubstring(self, s: str, words: List[str]) -> List[int]:
        if not s or not words:
            return []
        n = len(s)
        one_word_len = len(words[0])        #一个单词的长度
        word_cnt = len(words)               #单词的个数
        all_len = one_word_len * word_cnt

        words_cnt = defaultdict(int)        #每个单词出现的次数
        for w in words:
            words_cnt[w] += 1

        res = [] 
        for i in range(one_word_len):       #shell希尔排序的套路 start  delta = 一个单词的长度
            cur_w_num = 0                     #单词个数
            L, R = i, i
            cur_w_dic = defaultdict(int)      #当前单词的次数统计
            while R + one_word_len <= len(s):
                w = s[R: R + one_word_len]
                R += one_word_len           #R每次像右移一个单词的长度 类似于shell排序中的delta

                if w not in words_cnt:          #结束前，出现个不知道哪里的单词，整个前面一片就废了
                    L = R
                    cur_w_dic.clear()
                    cur_w_num = 0
                else:
                    cur_w_dic[w] += 1
                    cur_w_num += 1
                    while cur_w_dic[w] > words_cnt[w]:
                        L_w = s[L : L + one_word_len]
                        L += one_word_len       #L右移
                        cur_w_dic[L_w] -= 1       #做好统计
                        cur_w_num -= 1
                    if cur_w_num == word_cnt:     #如果说ok了
                        res.append(L)
        
        return res
```

* []

```c++
class Solution 
{
public:
    vector<int> findSubstring(string s, vector<string>& words) 
    {           //滑动窗口 + shell希尔排序 + 哈希统计
        int n = s.size();
        if (n == 0 || words.size() == 0)
            return vector<int> {};
        int word_num = words.size();            //单词个数
        int one_w_len = words[0].size();        //一个单词的长度

        unordered_map<string, int> word_cnt;    //统计每个单词出现的freq
        for (string & w: words)
            word_cnt[w] += 1;
        
        vector<int> res;
        for (int i = 0; i < one_w_len; i ++)    //每次的起点  类似shell希尔排序的起点
        {                                       //delta = 一个单词的长度
            int cur_w_num = 0;                  //滑动窗口内单词的个数
            int L = i,  R = i;                  //LR指针
            unordered_map<string, int> cur_w_cnt;   //统计滑动窗口内 每个单词的freq
            while (R + one_w_len <= s.size())        //R的范围
            {
                string w = s.substr(R, one_w_len);
                R += one_w_len;                     //R右移
                if (word_cnt.count(w) == 0)         //不是有效的单词
                {                                   //突然冒出一个傻子 前面就全废了
                    L = R;
                    cur_w_cnt.clear();
                    cur_w_num = 0;
                }
                else
                {
                    cur_w_cnt[w] += 1;
                    cur_w_num += 1;
                    while (cur_w_cnt[w] > word_cnt[w])  //处理的L标准模板
                    {
                        string L_w = s.substr(L, one_w_len);
                        L += one_w_len;
                        cur_w_cnt[L_w] --;
                        cur_w_num --;
                    }
                    if (cur_w_num == word_num)          //若单词个数对上了，就记录下来
                        res.push_back(L);
                }
            }
        }
        return res;
    }
};
```

