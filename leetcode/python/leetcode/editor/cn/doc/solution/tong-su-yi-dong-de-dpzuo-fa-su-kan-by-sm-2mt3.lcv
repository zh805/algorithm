#### 这道题我们用动态规划来做。

1. 先定义状态：(i从0开始)
   dp[i][0] 代表 第i间房子涂红色时 前i+1间房子累计所需的 最小成本；
   dp[i][1] 代表 第i间房子涂蓝色时 前i+1间房子累计所需的 最小成本；
   dp[i][2] 代表 第i间房子涂绿色时 前i+1间房子累计所需的 最小成本；
2. 确定状态转换：
   题目要求：相邻的两间房子不能涂相同的颜色，那只要我们当前要涂的颜色和前一间不同就好 ~~（废话）~~
   假设我们现在到了第3间房子，我们考虑一下涂那种颜色：
   假设涂红色：所以前一家房子只能是蓝色或者绿色，从他们中选一个最便宜的吧！
   那就是 `dp[2][0] = Math.min(dp[1][1],dp[1][2])+costs[2][0]`
   蓝色和绿色同理，由此我们可以得到状态转换方程！

* 

```
dp[i][0] = Math.min(dp[i-1][1],dp[i-1][2])+costs[i][0];
dp[i][1] = Math.min(dp[i-1][0],dp[i-1][2])+costs[i][1];
dp[i][2] = Math.min(dp[i-1][0],dp[i-1][1])+costs[i][2];
```

3. 确定最终结果：
   简单啦，当然是最后一间房子涂三种颜色中最便宜的一种啦~

代码如下：

* 

```
class Solution {
    public int minCost(int[][] costs) {
        int[][] dp = new int[costs.length][3];
        //第一件房子
        for(int i=0;i<3;i++)
            dp[0][i] = costs[0][i];
        for(int i=1;i<costs.length;i++){
            //状态转换
            dp[i][0] = Math.min(dp[i-1][1],dp[i-1][2])+costs[i][0];
            dp[i][1] = Math.min(dp[i-1][0],dp[i-1][2])+costs[i][1];
            dp[i][2] = Math.min(dp[i-1][0],dp[i-1][1])+costs[i][2];
        }
        return Math.min( dp[costs.length-1][0],
                    Math.min(dp[costs.length-1][1],dp[costs.length-1][2]));
    }
}
```

