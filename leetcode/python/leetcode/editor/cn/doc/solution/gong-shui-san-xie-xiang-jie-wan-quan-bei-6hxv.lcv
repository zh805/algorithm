## 完全背包（朴素解法）

在 [322. 零钱兑换](https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-bei-bao-wen-ti-zhan-zai-3265/) 中，我们求的是「取得特定价值所需要的最小物品个数」。

对于本题，我们求的是「取得特定价值的方案数量」。

**求的东西不一样，但问题的本质没有发生改变，同样属于「组合优化」问题。**

你可以这样来理解什么是组合优化问题：

**被选物品之间不需要满足特定关系，只需要选择物品，以达到「全局最优」或者「特定状态」即可。**

同时硬币相当于我们的物品，每种硬币可以选择「无限次」，很自然的想到「完全背包」。

这时候可以将「完全背包」的状态定义搬过来进行“微调”：

**定义 $f[i][j]$ 为考虑前 $i$ 件物品，凑成总和为 $j$ 的方案数量。**

为了方便初始化，我们一般让 $f[0][x]$ 代表不考虑任何物品的情况。

因此我们有显而易见的初始化条件：$f[0][0] = 1$，其余 $f[0][x] = 0$。

代表当没有任何硬币的时候，存在凑成总和为 0 的方案数量为 1；凑成其他总和的方案不存在。

当「状态定义」与「基本初始化」有了之后，我们不失一般性的考虑 $f[i][j]$ 该如何转移。

对于第 $i$ 个硬币我们有两种决策方案：

* 不使用该硬币：

$f[i - 1][j]$

* 使用该硬币：由于每个硬币可以被选择多次（容量允许的情况下），因此方案数量应当是选择「任意个」该硬币的方案总和：

$\sum_{k = 1}^{\left \lfloor {j / val} \right \rfloor}f[i - 1][j - k * val], val = nums[i - 1]$

代码：

* []

```Java
class Solution {
    public int change(int cnt, int[] cs) {
        int n = cs.length;
        int[][] f = new int[n + 1][cnt + 1];
        f[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            int val = cs[i - 1];
            for (int j = 0; j <= cnt; j++) {
                f[i][j] = f[i - 1][j];
                for (int k = 1; k * val <= j; k++) {
                    f[i][j] += f[i - 1][j - k * val];  
                }
            }
        }
        return f[n][cnt];
    }
}
```

* 时间复杂度：共有 $n * cnt$ 个状态需要转移，每个状态转移最多遍历 $cnt$ 次。整体复杂度为 $O(n * cnt^2)$。
* 空间复杂度：$O(n * cnt)$。

---

## 完全背包（一维优化）

显然二维完全背包求解方案复杂度有点高。

$n$ 的数据范围为 $10^2$，$cnt$ 的数据范围为 $10^3$，总的计算量为 $10^8$ 以上，处于超时边缘（实际测试可通过）。

我们需要对其进行「降维优化」，可以使用最开始讲的 [数学分析方式](https://leetcode-cn.com/problems/perfect-squares/solution/dong-tai-gui-hua-bei-bao-wen-ti-qiang-hu-hcmi/)，或者上一讲讲的 [换元优化方式](https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-bei-bao-wen-ti-zhan-zai-3265/) 进行降维优化。

由于 [数学分析方式](https://leetcode-cn.com/problems/perfect-squares/solution/dong-tai-gui-hua-bei-bao-wen-ti-qiang-hu-hcmi/) 十分耗时，我们用得更多的 [换元优化方式](https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-bei-bao-wen-ti-zhan-zai-3265/)。两者同样具有「可推广」特性。

因为后者更为常用，所以我们再来回顾一下如何进行「直接上手写一维空间优化的版本」 ：

1. 在二维解法的基础上，直接取消「物品维度」
2. 确保「容量维度」的遍历顺序为「从小到大」（适用于「完全背包」）
3. 将形如 $f[i - 1][j - k * val]$ 的式子更替为 $f[j - val]$，同时解决「数组越界」问题（将物品维度的遍历修改为从 $val$ 开始）

代码：

* []

```java
class Solution {
    public int change(int cnt, int[] cs) {
        int n = cs.length;
        int[] f = new int[cnt + 1];
        f[0] = 1;
        for (int i = 1; i <= n; i++) {
            int val = cs[i - 1];
            for (int j = val; j <= cnt; j++) {
                f[j] += f[j - val];
            }
        }
        return f[cnt];
    }
}
```

* 时间复杂度：共有 $n * cnt$ 个状态需要转移，整体复杂度为 $O(n * cnt)$。
* 空间复杂度：$O(cnt)$。

---

## 背包问题（目录）

1. 01背包 : [背包问题 第一讲](https://mp.weixin.qq.com/s/xmgK7SrTnFIM3Owpk-emmg)

   1. 【练习】01背包 : [背包问题 第二讲（416. 分割等和子集）](https://leetcode-cn.com/problems/partition-equal-subset-sum/solution/gong-shui-san-xie-bei-bao-wen-ti-shang-r-ln14/)

   2. 【学习&练习】01背包 : [背包问题 第三讲（416. 分割等和子集）](https://leetcode-cn.com/problems/partition-equal-subset-sum/solution/gong-shui-san-xie-bei-bao-wen-ti-xia-con-mr8a/)
2. 完全背包 : [背包问题 第四讲](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247486107&idx=1&sn=e5fa523008fc5588737b7ed801caf4c3&chksm=fd9ca184caeb28926959c0987208a3932ed9c965267ed366b5b82a6fc16d42f1ff40c29db5f1&token=990510480&lang=zh_CN#rd)

   1. 【练习】完全背包 : [背包问题 第五讲（279. 完全平方数）](https://leetcode-cn.com/problems/perfect-squares/solution/gong-shui-san-xie-xiang-jie-wan-quan-bei-nqes/)

   2. 【练习】完全背包 : [背包问题 第六讲（322. 零钱兑换）](https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-bei-bao-wen-ti-zhan-zai-3265/)

   3. 【练习】完全背包 : [背包问题 第七讲（518. 零钱兑换 II）](https://leetcode-cn.com/problems/coin-change-2/solution/gong-shui-san-xie-xiang-jie-wan-quan-bei-6hxv/)
3. 多重背包 : [背包问题 第八讲](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247486649&idx=1&sn=ba09ee2d78377c2ddbb9e43622880133&chksm=fd9ca7a6caeb2eb0db61b7604a4aaa8d3ca90d6bc05eb6f50aaab415c4bd7f0047c1ca591018&token=1008907671&lang=zh_CN&scene=21#wechat_redirect)

4. 多重背包（优化篇）

   1. 多重背包（优化篇）: [背包问题 第九讲](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247486796&idx=1&sn=a382b38f8aed295410550bb1767437bd&chksm=fd9ca653caeb2f456262bbf70ffe1eeda8758b426a901a6ac15be184e7017870020e456c6fa2&token=1821593597&lang=zh_CN#rd)

   2. 多重背包（优化篇）: [背包问题 第十讲](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247486963&idx=1&sn=51d34f0f841122ed9be2335a402041e8&chksm=fd9ca6eccaeb2ffa1abe413177be376799b427b092bfb73c13e7b77e171b460f4c24b3b7d3bc&token=1821593597&lang=zh_CN#rd)
5. 混合背包 : [背包问题 第十一讲](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247487034&idx=1&sn=eaa05b76387d34aa77f7f14f35fa78a4&chksm=fd9ca525caeb2c33095d285222dcee0dd072465bf7288bda0aab39e90a04bb7b1af018b89fd4&token=496118769&lang=zh_CN#rd)

   1. 【练习】混合背包
6. 分组背包

   1. 【练习】分组背包
7. 多维背包

   1. 【练习】多维背包 : [背包问题 第 * 讲（474. 一和零）](https://leetcode-cn.com/problems/ones-and-zeroes/solution/gong-shui-san-xie-xiang-jie-ru-he-zhuan-174wv/)
   2. 【练习】多维背包 : [背包问题 第 * 讲（879. 盈利计划）](https://leetcode-cn.com/problems/profitable-schemes/solution/gong-shui-san-xie-te-shu-duo-wei-fei-yon-7su9/)
8. 树形背包

   1. 【练习】树形背包
9. 背包求方案数

   1. 【练习】背包求方案数 : [背包问题 第 * 讲（494. 目标和）](https://leetcode-cn.com/problems/target-sum/solution/gong-shui-san-xie-yi-ti-si-jie-dfs-ji-yi-et5b/)
   2. 【练习】背包求方案数 : [背包问题 第 * 讲（879. 盈利计划）](https://leetcode-cn.com/problems/profitable-schemes/solution/gong-shui-san-xie-te-shu-duo-wei-fei-yon-7su9/)
10. 背包求具体方案

    1. 【练习】背包求具体方案 : [背包问题 第 * 讲（1049. 最后一块石头的重量 II）](https://leetcode-cn.com/problems/last-stone-weight-ii/solution/gong-shui-san-xie-xiang-jie-wei-he-neng-jgxik/)
11. 泛化背包
    1. 【练习】泛化背包

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
