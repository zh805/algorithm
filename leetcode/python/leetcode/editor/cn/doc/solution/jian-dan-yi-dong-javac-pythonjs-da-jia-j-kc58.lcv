### 1. 思路讲解

![10_198_思路讲解.mp4](https://leetcode-cn.com/problems/Gu0c2T/solution/jian-dan-yi-dong-javac-pythonjs-da-jia-j-kc58/f7d99229-4955-47b1-9f57-26dc506c20f7)

### 2. 记忆化搜索[深度优先遍历]

请看下面视频讲解：

![11_198_记忆化搜索实现.mp4](https://leetcode-cn.com/problems/Gu0c2T/solution/jian-dan-yi-dong-javac-pythonjs-da-jia-j-kc58/3d44eea0-06e2-4564-8428-11c5a0901439)

代码实现如下：

* []

```Java
// 记忆化搜索(一)
public int rob(int[] nums) {
    // memo[i]：存储偷盗 [i, nums.length - 1] 区间房子得到的最大金额
    int[] memo = new int[nums.length];
    Arrays.fill(memo, -1);
    return dfs(nums, 0, memo);
}

private int dfs(int[] nums, int i, int[] memo) {
    if (i >= nums.length) return 0;

    if (memo[i] != -1) return memo[i];

    int left = dfs(nums, i + 1, memo);
    int right = dfs(nums, i + 2, memo);

    memo[i] = Math.max(left, right + nums[i]);
    return memo[i];
}
```

* []

```C++
// 1. 记忆化搜索
int rob(vector<int>& nums) {
    vector<int> memo(nums.size(), -1);
    return dfs(nums, 0, memo);
}

int dfs(vector<int> nums, int i, vector<int>& memo) {
    if (i >= nums.size()) return 0;

    if (memo[i] != -1) return memo[i];

    int left = dfs(nums, i + 1, memo);
    int right = dfs(nums, i + 2, memo);

    memo[i] = max(left, right + nums[i]);
    return memo[i];
}
```

* []

```javascript
// 1. 记忆化搜索
var rob = function(nums) {
    const n = nums.length
    const memo = new Array(n).fill(-1)

    const dfs = (i) => {
        if (i >= n) return 0
        if (memo[i] != -1) return memo[i]

        const left = dfs(i + 1)
        const right = dfs(i + 2)

        memo[i] = Math.max(left, right + nums[i])
        return memo[i]
    }

    return dfs(0)
};
```

* []

```python
# 1. 记忆化搜索
def rob(self, nums: List[int]) -> int:
    n = len(nums)
    memo = [-1] * n

    def dfs(i) -> int:
        if i >= n: return 0
        if memo[i] != -1: return memo[i]
        left = dfs(i + 1)
        right = dfs(i + 2)
        memo[i] = max(left, right + nums[i])
        return memo[i]

    return dfs(0)
```

### 3. memo 数组的含义

![12_198_memo数组的含义.mp4](https://leetcode-cn.com/problems/Gu0c2T/solution/jian-dan-yi-dong-javac-pythonjs-da-jia-j-kc58/aad461d9-9819-4af1-9f42-ee89a53f6143)

代码实现如下：

* []

```Java
// 记忆化搜索(二)
public int rob(int[] nums) {
    // memo[i]：存储偷盗 [0, i] 区间房子得到的最大金额
    int[] memo = new int[nums.length];
    Arrays.fill(memo, -1);
    return dfs2(nums, nums.length - 1, memo);
}

private int dfs2(int[] nums, int i, int[] memo) {
    if (i == 0) return nums[0];
    if (i == 1) return Math.max(nums[0], nums[1]);

    if (memo[i] != -1) return memo[i];

    int left = dfs2(nums, i - 1, memo);
    int right = dfs2(nums, i - 2, memo);

    memo[i] = Math.max(left, right + nums[i]);
    return memo[i];
}
```

* []

```C++
// 2. 记忆化搜索（二）
int rob(vector<int>& nums) {
    vector<int> memo(nums.size(), -1);
    return dfs2(nums, nums.size() - 1, memo);
}

int dfs2(vector<int> nums, int i, vector<int>& memo) {
    if (i == 0) return nums[0];
    if (i == 1) return max(nums[0], nums[1]);

    if (memo[i] != -1) return memo[i];

    int left = dfs2(nums, i - 1, memo);
    int right = dfs2(nums, i - 2, memo);

    memo[i] = max(left, right + nums[i]);
    return memo[i];
}
```

* []

```javascript
// 2. 记忆化搜索(二)
var rob = function(nums) {
    const n = nums.length
    const memo = new Array(n).fill(-1)

    const dfs = (i) => {
        if (i == 0) return nums[0]
        if (i == 1) return Math.max(nums[0], nums[1])

        if (memo[i] != -1) return memo[i]

        const left = dfs(i - 1)
        const right = dfs(i - 2)

        memo[i] = Math.max(left, right + nums[i])
        return memo[i]
    }

    return dfs(nums.length - 1)
};
```

* []

```python
# 2. 记忆化搜索(二)
def rob(self, nums: List[int]) -> int:
    n = len(nums)
    memo = [-1] * n

    def dfs(i) -> int:
        if i == 0: return nums[0]
        if i == 1: return max(nums[0], nums[1])
        if memo[i] != -1: return memo[i]
        left = dfs(i - 1)
        right = dfs(i - 2)
        memo[i] = max(left, right + nums[i])
        return memo[i]

    return dfs(len(nums) - 1)
```

### 4. 动态规划代码实现

![13_198_动态规划实现.mp4](https://leetcode-cn.com/problems/Gu0c2T/solution/jian-dan-yi-dong-javac-pythonjs-da-jia-j-kc58/f37088dd-e6ae-46dd-a214-40108dc32a85)

代码实现如下：

* []

```Java
// 动态规划
public int rob3(int[] nums) {
    if (nums.length == 1) return nums[0];

    // dp[i]：表示偷盗 [0, i] 区间房子得到的最大金额
    int[] dp = new int[nums.length];

    dp[0] = nums[0];
    dp[1] = Math.max(nums[0], nums[1]);

    for (int i = 2; i < nums.length; i++) {
        dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);
    }

    return dp[nums.length - 1];
}

// 动态规划 + 状态压缩
public int rob4(int[] nums) {
    if (nums.length == 1) return nums[0];

    int prevMax = 0;
    int currMax = 0;

    for (int num : nums) {
        int tmpMax = Math.max(currMax, prevMax + num);
        prevMax = currMax;
        currMax = tmpMax;
    }

    return currMax;
}
```

* []

```C++
// 3. 动态规划
int rob3(vector<int>& nums) {
    int n = nums.size();
    if (n == 1) return nums[0];

    vector<int> dp(n, -1);

    dp[0] = nums[0];
    dp[1] = max(nums[0], nums[1]);

    for (int i = 2; i < n; i++) {
        dp[i] = max(dp[i - 1], dp[i - 2] + nums[i]);
    }

    return dp[n - 1];
}

    // 4. 动态规划 + 状态压缩
int rob4(vector<int>& nums) {
    int n = nums.size();
    if (n == 1) return nums[0];

    int preMax = 0;
    int currMax = 0;

    for (int num : nums) {
        int tmpMax = max(currMax, preMax + num);
        preMax = currMax;
        currMax = tmpMax;
    }

    return currMax;
}
```

* []

```javascript
// 3. 动态规划
var rob2 = function(nums) {
    const n = nums.length
    if (n == 1) return nums[0]

    const dp = new Array(n).fill(-1)
    dp[0] = nums[0]
    dp[1] = Math.max(nums[0], nums[1])

    for (let i = 2; i < n; i++) {
        dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i])
    }

    return dp[n - 1]
}

// 4. 动态规划 + 状态压缩
var rob4 = function(nums) {
    const n = nums.length
    if (n == 1) return nums[0]

    let prevMax = 0
    let currMax = 0

    for (const num of nums) {
        const tmpMax = Math.max(currMax, prevMax + num)
        prevMax = currMax
        currMax = tmpMax
    }

    return currMax
}
```

* []

```python
# 3. 动态规划
def rob3(self, nums: List[int]) -> int:
    n = len(nums)
    if n == 1: return nums[0]

    dp = [-1] * n

    dp[0] = nums[0]
    dp[1] = max(nums[0], nums[1])

    for i in range(2, n):
        dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])

    return dp[n - 1]

# 4. 动态规划 + 状态更新
def rob4(self, nums: List[int]) -> int:
    n = len(nums)
    if n == 1: return nums[0]

    prev_max = curr_max = 0

    for num in nums:
        tmp_max = max(curr_max, prev_max + num)
        prev_max, curr_max = curr_max, tmp_max

    return curr_max
```

在刷题的时候：
1. 如果你觉得自己数据结构与算法**基础不够扎实**，那么[请点这里](http://www.tangweiqun.com/api/31104/offer089?av=1&cv=1)，这里包含了**一个程序员 5 年内需要的所有算法知识**。

2. 如果你感觉刷题**太慢**，或者感觉**很困难**，或者**赶时间**，那么[请点这里](http://www.tangweiqun.com/api/35548/offer089?av=1&cv=1)。这里**用 365 道高频算法题，带你融会贯通算法知识，做到以不变应万变**。

3. **回溯、贪心和动态规划，是算法面试中的三大难点内容**，如果你只是想搞懂这三大难点内容 [请点这里](http://www.tangweiqun.com/api/38100/offer089?av=1&cv=1)。

**以上三个链接中的内容，都支持 Java/C++/Python/js 四种语言**
