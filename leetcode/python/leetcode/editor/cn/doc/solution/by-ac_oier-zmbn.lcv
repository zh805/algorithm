## 树状数组

本题只涉及「单点修改」和「区间求和」，属于「树状数组」的经典应用。

树状数组涉及的操作有两个，复杂度均为 $O(\log{n})$：

* `void add(int x, int u)`：含义为在 $x$ 的位置增加 $u$（注意位置下标从 $1$ 开始）；
* `int query(int x)`：含义为查询从 $[1, x]$ 区间的和为多少（配合容斥原理，可实现任意区间查询）。

代码：

* []

```Java
class NumArray {
    int[] tr;
    int lowbit(int x) {
        return x & -x;
    }
    void add(int x, int u) {
        for (int i = x; i <= n; i += lowbit(i)) tr[i] += u;
    }
    int query(int x) {
        int ans = 0;
        for (int i = x; i > 0; i -= lowbit(i)) ans += tr[i];
        return ans;
    }

    int[] nums;
    int n;
    public NumArray(int[] _nums) {
        nums = _nums;
        n = nums.length;
        tr = new int[n + 10];
        for (int i = 0; i < n; i++) add(i + 1, nums[i]);
    }
    public void update(int index, int val) {
        add(index + 1, val - nums[index]);
        nums[index] = val;
    }
    public int sumRange(int left, int right) {
        return query(right + 1) - query(left);
    }
}
```

* 时间复杂度：插入和查询复杂度均为 $O(\log{n})$
* 空间复杂度：$O(n)$

---

## 线段树

相比「树状数组」，另外一个更为进阶且通用的做法是使用「线段树」。

线段树的所有操作同样为 $O(\log{n})，$由于本题不涉及「区间修改」操作，因此我们的线段树只需要实现 `pushup` 操作（子节点往上更新父节点），而不需要实现用于懒标记的 `pushdown` 操作（父节点往下传递「更新」的操作）。

关于线段树设计的几种操作：

* `void build(int u, int l, int r)`：含义为从编号为 $u$ 的节点开始，构造范围为 $[l,r]$ 的树节点；
* `void update(int u, int x, int v)`：含义为从编号为 $u$ 的节点开始，在 $x$ 位置增加 $v$；
  * 更具一般性（涉及区间修改）的操作应该为 `void update(int u, int l, int r, int v)`，代表在 $[l, r]$ 范围增加 $v$；
* `int query(int u, int l, int r)`：含义为从编号为 $u$ 的节点开始，查询 $[l, r]$ 区间和为多少。

> 注意：对于编号为 `u` 的节点而言，其左子节点的编号为 `u << 1`，其右节点的编号为 `u << 1 | 1`。

代码（考虑为线段树增加 `static` 优化的代码见 $P2$，样例个数较少，优化不明显）：

* []

```Java
class NumArray {
    Node[] tr;
    class Node {
        int l, r, v;
        Node(int _l, int _r) {
            l = _l; r = _r;
        }
    }
    void build(int u, int l, int r) {
        tr[u] = new Node(l, r);
        if (l == r) return;
        int mid = l + r >> 1;
        build(u << 1, l, mid);
        build(u << 1 | 1, mid + 1, r);
    }
    void update(int u, int x, int v) {
        if (tr[u].l == x && tr[u].r == x) {
            tr[u].v += v;
            return ;
        }
        int mid = tr[u].l + tr[u].r >> 1;
        if (x <= mid) update(u << 1, x, v);
        else update(u << 1 | 1, x, v);
        pushup(u);
    }
    int query(int u, int l, int r) {
        if (l <= tr[u].l && tr[u].r <= r) return tr[u].v;
        int mid = tr[u].l + tr[u].r >> 1;
        int ans = 0;
        if (l <= mid) ans += query(u << 1, l, r);
        if (r > mid) ans += query(u << 1 | 1, l, r);
        return ans;
    }
    void pushup(int u) {
        tr[u].v = tr[u << 1].v + tr[u << 1 | 1].v;
    }

    int[] nums;
    public NumArray(int[] _nums) {
        nums = _nums;
        int n = nums.length;
        tr = new Node[n * 4];
        build(1, 1, n);
        for (int i = 0; i < n; i++) update(1, i + 1, nums[i]);
    }
    public void update(int index, int val) {
        update(1, index + 1, val - nums[index]);
        nums[index] = val;
    }
    public int sumRange(int left, int right) {
        return query(1, left + 1, right + 1);
    }
}
```

* []

```Java
class NumArray {
    static int N = 30010;
    static Node[] tr = new Node[N * 4];
    class Node {
        int l, r, v;
        Node(int _l, int _r) {
            l = _l; r = _r;
        }
    }
    void build(int u, int l, int r) {
        if (tr[u] == null) {
            tr[u] = new Node(l, r);
        } else {
            tr[u].l = l; tr[u].r = r; tr[u].v = 0;
        }
        if (l == r) return ;
        int mid = l + r >> 1;
        build(u << 1, l, mid);
        build(u << 1 | 1, mid + 1, r);
    }
    void update(int u, int x, int v) {
        if (tr[u].l == x && tr[u].r == x) {
            tr[u].v += v;
            return ;
        }
        int mid = tr[u].l + tr[u].r >> 1;
        if (x <= mid) update(u << 1, x, v);
        else update(u << 1 | 1, x, v);
        pushup(u);
    }
    int query(int u, int l, int r) {
        if (l <= tr[u].l && tr[u].r <= r) return tr[u].v;
        int mid = tr[u].l + tr[u].r >> 1;
        int ans = 0;
        if (l <= mid) ans += query(u << 1, l, r);
        if (r > mid) ans += query(u << 1 | 1, l, r);
        return ans;
    }
    void pushup(int u) {
        tr[u].v = tr[u << 1].v + tr[u << 1 | 1].v;
    }

    int[] nums;
    public NumArray(int[] _nums) {
        nums = _nums;
        int n = nums.length;
        build(1, 1, n);
        for (int i = 0; i < n; i++) update(1, i + 1, nums[i]);
    }
    public void update(int index, int val) {
        update(1, index + 1, val - nums[index]);
        nums[index] = val;
    }
    public int sumRange(int left, int right) {
        return query(1, left + 1, right + 1);
    }
}
```

* 时间复杂度：插入和查询复杂度均为 $O(\log{n})$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
