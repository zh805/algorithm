# 思路

一个dp从nums[0]到nums[len-2];
另一个dp从nums[1]到nums[len-1];
**这两个dp包括了所有可能情况**，最后比较出最大值即可

# 代码

* 

```
class Solution {
    public int rob(int[] nums) {
        int len = nums.length;
        if (len==1)return nums[0];
        if (len==2)return Math.max(nums[0],nums[1]);
        int[] dp1 = new int[len-1];
        int[] dp2 = new int[len-1];
        dp1[0] = nums[1];
        dp1[1] = Math.max(nums[1],nums[2]);
        dp2[0] = nums[0];
        dp2[1] = Math.max(nums[0],nums[1]);
        for (int i=2;i<len-1;i++){
            dp1[i] = Math.max(dp1[i-2]+nums[i+1],dp1[i-1]);
            dp2[i] = Math.max(dp2[i-2]+nums[i],dp2[i-1]);
        }
        return Math.max(dp1[len-2],dp2[len-2]);

    }
}
```

