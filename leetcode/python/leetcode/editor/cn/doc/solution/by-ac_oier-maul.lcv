## 递归

假定我们存在函数 `Node dfs(int a, int b, int c, int d)`，其能够返回「以 $(a, b)$ 为左上角，$(c, d)$ 为右下角」所代表的矩阵的根节点。

那么最终答案为 `dfs(0, 0, n-1, n-1)`，不失一般性考虑「以 $(a, b)$ 为左上角，$(c, d)$ 为右下角」时如何计算：

* 判断该矩阵是否为全 $0$ 或全 $1$：
  * 如果是则直接创建根节点（该节点四个子节点属性均为空）并进行返回；
  * 如果不是则创建根节点，递归创建四个子节点并进行赋值，利用左上角 $(a,b)$ 和右下角 $(c, d)$ 可算的横纵坐标的长度为 $c - a + 1$ 和 $d - b + 1$，从而计算出将当前矩阵四等分所得到的子矩阵的左上角和右下角坐标。

由于矩阵大小最多为 $2^6 = 64$ ，因此判断某个子矩阵是否为全 $0$ 或全 $1$ 的操作用「前缀和」或者是「暴力」来做都可以。

代码：

* []

```Java
class Solution {
    int[][] g;
    public Node construct(int[][] grid) {
        g = grid;
        return dfs(0, 0, g.length - 1, g.length - 1);
    }
    Node dfs(int a, int b, int c, int d) {
        boolean ok = true;
        int t = g[a][b];
        for (int i = a; i <= c && ok; i++) {
            for (int j = b; j <= d && ok; j++) {
                if (g[i][j] != t) ok = false;
            }
        }
        if (ok) return new Node(t == 1, true);
        Node root = new Node(t == 1, false);
        int dx = c - a + 1, dy = d - b + 1;
        root.topLeft = dfs(a, b, a + dx / 2 - 1, b + dy / 2 - 1); 
        root.topRight = dfs(a, b + dy / 2, a + dx / 2 - 1, d);
        root.bottomLeft = dfs(a + dx / 2, b, c, b + dy / 2 - 1);
        root.bottomRight = dfs(a + dx / 2, b + dy / 2, c, d);
        return root;
    }
}
```

* 时间复杂度：递归的复杂度分析要根据主定理，假设矩阵大小为 $n * n$，根据主定理 $T(n) = aT(\frac{n}{b}) + f(n)$，单次递归最多会产生 $4$ 个子问题（由大矩阵递归 $4$ 个小矩阵），因此问题递归子问题数量 $a = 4$，而子问题规模缩减系数 $b$ 为原本的一半（子矩阵的大小为 $\frac{n}{2} * \frac{n}{2}$），剩余的 $f(n)$ 为判断全 $0$ 和 全 $1$ 的时间开销，不考虑标识位 $ok$ 带来的剪枝效果，每次判断全 $0$ 或全 $1$ 的复杂度与当前问题规模相等，即 $f(n) = O(n^2)$，但整个大小为 $n * n$ 矩阵每次进行长宽减半的子矩阵拆分，最多会被拆分为 $\log{n}$ 次，因此这部分总的计算量为 $\log{n} * n^2$ 。整体复杂度为 $O(n^2 + \log{n} * n^2)$
* 空间复杂度：忽略递归带来的额外空间开销，复杂度为 $O(1)$

---

## 递归（前缀和优化）

使用前缀和优化「判断全 $0$ 和全 $1$」的操作：对矩阵 `grid` 求前缀和数组 `sum`，对于一个「以左上角为 $(a, b)$，右下角为 $(c, d)$ 」的子矩阵而言，其所包含的格子总数为 $tot = (c - a + 1) * (d - b + 1)$ 个，当且仅当矩阵和为 $0$ 或 $tot$ 时，矩阵全 $0$ 或 $1$。

代码：

* []

```Java
class Solution {
    static int[][] sum = new int[70][70];   
    int[][] g;
    public Node construct(int[][] grid) {
        g = grid;
        int n = grid.length;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + g[i - 1][j - 1];
            }
        }
        return dfs(0, 0, n - 1, n - 1);
    }
    Node dfs(int a, int b, int c, int d) {
        int cur = sum[c + 1][d + 1] - sum[a][d + 1] - sum[c + 1][b] + sum[a][b];
        int dx = c - a + 1, dy = d - b + 1, tot = dx * dy;
        if (cur == 0 || cur == tot) return new Node(g[a][b] == 1, true);
        Node root = new Node(g[a][b] == 1, false);
        root.topLeft = dfs(a, b, a + dx / 2 - 1, b + dy / 2 - 1);
        root.topRight = dfs(a, b + dy / 2, a + dx / 2 - 1, d);
        root.bottomLeft = dfs(a + dx / 2, b, c, b + dy / 2 - 1);
        root.bottomRight = dfs(a + dx / 2, b + dy / 2, c, d);
        return root;
    }
}
```

* 时间复杂度：分析同理，但判断全 $0$ 和全 $1$ 的复杂度下降为 $O(1)$，整体复杂度为 $O(n^2 + \log{n})$
* 空间复杂度：忽略递归带来的额外空间开销，复杂度为 $O(n^2)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
