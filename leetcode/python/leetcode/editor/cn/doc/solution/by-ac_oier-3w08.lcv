## 滑动窗口

利用 $1 <= nums[i] <= 1000$，我们可以从前往后处理所有的 $nums[i]$，使用一个变量 $cur$ 记录当前窗口的乘积，使用两个变量 $j$ 和 $i$ 分别代表当前窗口的左右端点。

当 $cur >= k$ 时，我们考虑将左端点 $j$ 右移，同时消除原来左端点元素 $nums[j]$ 对 $cur$ 的贡献，直到 $cur >= k$ 不再满足，这样我们就可以得到每个右端点 $nums[i]$ 的最远左端点 $nums[j]$，从而得知以 $nums[i]$ 为结尾的合法子数组个数为 $i - j + 1$。

代码：

* []

```Java
class Solution {
    public int numSubarrayProductLessThanK(int[] nums, int k) {
        int n = nums.length, ans = 0;
        if (k <= 1) return 0;
        for (int i = 0, j = 0, cur = 1; i < n; i++) {
            cur *= nums[i];
            while (cur >= k) cur /= nums[j++];
            ans += i - j + 1;
        }
        return ans;
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
