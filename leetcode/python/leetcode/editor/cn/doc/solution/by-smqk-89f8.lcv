![image.png](https://pic.leetcode-cn.com/1648347242-tBEHSF-image.png)

### 解题思路

1、决策对象：是指定位置的字符翻还是不翻；
2、阶段： 字符串长度 1 -> 2 ... -> n
3、决策状态： dp[i][0] 以 0 结尾最少翻转次数， dp[i][1] 以1结尾最少翻转次数；
4、状态转移方程： 参见代码

### 代码

* java

```java
class Solution {
    public int minFlipsMonoIncr(String s) {
        int len = s.length();
        // dp[i][0] 表示 s.charAt(i) 处为 ‘0’ 时字符串单调递增最少的翻转次数
        // dp[i][1] 表示 s.charAt(i) 处为 ‘1’ 时字符串单调递增最少的翻转次数
        int[][] dp = new int[len][2];

        char[] words = s.toCharArray();
        // 初始状态
        dp[0][0] = words[0] == '0' ? 0 : 1;
        dp[0][1] = words[0] == '1' ? 0 : 1;

        // 转移方程
        for(int i=1;i<len;i++){
            // ‘0’ 结尾则前一个字符只能是 ‘0’
            dp[i][0] = dp[i-1][0] + (words[i] == '0' ? 0 : 1);
            // ‘1’ 结尾则前一个字符既可以是 ‘0’也可以是 ‘1’, 哪个状态翻转次数最少就使用哪个状态
            dp[i][1] = Math.min(dp[i-1][0], dp[i-1][1]) + (words[i] == '1' ? 0 : 1);
        }

        // 字符串全部字符都翻转成单调状态，最少值就是二选一
        return Math.min(dp[len-1][0], dp[len-1][1]);
    }
}
```

【优化内存开销】

* java

```java
class Solution {
    public int minFlipsMonoIncr(String s) {
        int len = s.length();
        char[] words = s.toCharArray();
        int endsWith0 = (words[0] == '0') ? 0 : 1;
        int endsWith1 = (words[0] == '1') ? 0 : 1;

        for(int i=1;i<len;i++){
            int newEndsWith0 = endsWith0 + (words[i] == '0' ? 0 : 1);
            endsWith1 = Math.min(endsWith0, endsWith1) + (words[i] == '1' ? 0 : 1);
            endsWith0 = newEndsWith0;
        }

        return Math.min(endsWith0, endsWith1);
    }
}
```

### 最后

如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/

也欢迎加我微信『 **code5bug** 』和 加入我们的「组队打卡」小群。
