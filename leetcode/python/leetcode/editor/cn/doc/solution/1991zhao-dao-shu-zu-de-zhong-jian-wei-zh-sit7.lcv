# [1991.找到数组的中间位置](https://leetcode-cn.com/problems/find-the-middle-index-in-array/solution/1991zhao-dao-shu-zu-de-zhong-jian-wei-zh-sit7/)

> https://leetcode-cn.com/problems/find-the-middle-index-in-array/solution/1991zhao-dao-shu-zu-de-zhong-jian-wei-zh-sit7/
>
> 难度：简单

## 题目：

给你一个下标从 0 开始的整数数组 nums ，请你找到 最左边 的中间位置 middleIndex （也就是所有可能中间位置下标最小的一个）。

中间位置 middleIndex 是满足 nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1] 的数组下标。

如果 middleIndex == 0 ，左边部分的和定义为 0 。类似的，如果 middleIndex == nums.length - 1 ，右边部分的和定义为 0 。

请你返回满足上述条件 最左边 的 middleIndex ，如果不存在这样的中间位置，请你返回 -1 。

## 示例：

* 

```
示例 1：
输入：nums = [2,3,-1,8,4]
输出：3
解释：
下标 3 之前的数字和为：2 + 3 + -1 = 4
下标 3 之后的数字和为：4 = 4

示例 2：
输入：nums = [1,-1,4]
输出：2
解释：
下标 2 之前的数字和为：1 + -1 = 0
下标 2 之后的数字和为：0

示例 3：
输入：nums = [2,5]
输出：-1
解释：
不存在符合要求的 middleIndex 。

示例 4：
输入：nums = [1]
输出：0
解释：
下标 0 之前的数字和为：0
下标 0 之后的数字和为：0
```

提示：
- 1 <= nums.length <= 100
- -1000 <= nums[i] <= 1000

## 分析

首先这道题需要获取数组所有元素的总和，难免遍历一次数组求得总数。
之后在二次遍历时，初始化一个pre_sum为循环累加和，当：
`total - 当前元素 == pre_sum * 2` 时
表示遇到了最近的中间元素，返回该下表。否则，当循环结束后返回-1即可。

## 解题：

**Python:**

* python

```python
class Solution:
    def findMiddleIndex(self, nums):
        pre_sum, total = 0, sum(nums)
        for i in range(len(nums)):
            if total - nums[i] == pre_sum * 2:
                return i
            pre_sum += nums[i]
        return -1
```

**Java:**

* java

```java
class Solution {
    public int findMiddleIndex(int[] nums) {
        int pre_sum = 0;
        int total = 0;
        for (int num : nums) {
            total += num;
        }
        for (int i = 0; i < nums.length; i++) {
            if (total - nums[i] == pre_sum * 2) {
                return i;
            }
            pre_sum += nums[i];
        }
        return -1;
    }
}
```

欢迎关注我的公众号: **清风Python**，带你每日学习Python算法刷题的同时，了解更多python小知识。

有喜欢力扣刷题的小伙伴可以加我微信（King_Uranus）互相鼓励，共同进步，一起玩转超级码力！

我的个人博客：[https://qingfengpython.cn](https://qingfengpython.cn)

力扣解题合集：[https://github.com/BreezePython/AlgorithmMarkdown](https://github.com/BreezePython/AlgorithmMarkdown)
