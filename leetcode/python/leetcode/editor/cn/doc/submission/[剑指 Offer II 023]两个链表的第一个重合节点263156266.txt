# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
    #     """
    #     方法1：遍历计算链表长度，计算出两个链表的长度差n；然后长的先走n步后，短的也开始走，相等时即为交点。
    #     :param headA:
    #     :param headB:
    #     :return:
    #     """
    #     cur_a, cur_b = headA, headB
    #     len_a, len_b = 0, 0
    #     while cur_a:
    #         len_a += 1
    #         cur_a = cur_a.next
    #
    #     len_b = 0
    #     while cur_b:
    #         len_b += 1
    #         cur_b = cur_b.next
    #
    #     begin_a, begin_b = headA, headB
    #     if len_a > len_b:
    #         diff_len = len_a - len_b
    #         for _ in range(diff_len):
    #             begin_a = begin_a.next
    #     else:
    #         diff_len = len_b - len_a
    #         for _ in range(diff_len):
    #             begin_b = begin_b.next
    #
    #     while begin_a and begin_b:
    #         if begin_a == begin_b:
    #             return begin_a
    #         begin_a = begin_a.next
    #         begin_b = begin_b.next
    #
    #     return None

    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        """
        方法2：两个指针从A和B头结点开始遍历，A到尾部后从B的头开始遍历，B同样。两指针相同时，即为交点。
        :param headA:
        :param headB:
        :return:
        """
        cur_a, cur_b = headA, headB

        while cur_a != cur_b:
            cur_a = cur_a.next if cur_a else headB
            cur_b = cur_b.next if cur_b else headA

        return cur_a
        

# runtime:144 ms
# memory:29.7 MB
