
from typing import List
from bisect import bisect_left
from random import randint
from itertools import accumulate


class Solution:
    """
    方法1：前缀和 + 二分查找
    1、假设W=[1,2,3,4], 其前缀和为 [1, 3, 6, 10]
    2、从 [1,10] 中选一个数字，插入到前缀和数组中。
    3、前缀和数组中有4个区间，[0],[1,3],[4,6],[7,10], 每个区间的左边界是其之前出现的所有元素和+1,右边界是到其的元素和。
    4、随机选取[1, 10]中的数字，使用二分查找找出其插入位置。相同数字要插入原数字左侧，故用bisect_left。
    """

    def __init__(self, w: List[int]):
        self.w = w
        # self.prefix = [0 for _ in range(len(self.w))]
        # for idx, item in enumerate(w):
        #     self.prefix[idx] = self.prefix[idx - 1] + item
        self.prefix = list(accumulate(w))

    def pickIndex(self) -> int:
        num = randint(1, self.prefix[-1])
        return bisect_left(self.prefix, num)

# Your Solution object will be instantiated and called as such:
# obj = Solution(w)
# param_1 = obj.pickIndex()

# runtime:180 ms
# memory:20 MB
