class Solution:
    def minWindow(self, s: str, t: str) -> str:
        """
        方法1：滑动窗口
        :param s:
        :param t:
        :return:
        """
        result = ''

        len_s, len_t = len(s), len(t)
        if len_s < len_t:
            return result

        # 统计所有字符出现的频率,
        window = [0 for _ in range(ord('z') - ord('A') + 1)]

        # 字符在t中出现一次，频率+1；在s中出现一次，频率减去1；因此当window中所有值都小于等于0时，满足子串条件。
        for i in range(len_t):
            window[ord(t[i]) - ord('A')] += 1
            window[ord(s[i]) - ord('A')] -= 1

        if self.is_sub(window):
            return s[:len_t]

        left = 0
        min_length = len_s + 1
        for right in range(len_t, len_s):
            window[ord(s[right]) - ord('A')] -= 1
            while self.is_sub(window):
                # 满足子串条件时，取最小的子串长度
                if right - left + 1 < min_length:
                    min_length = right - left + 1
                    result = s[left: right + 1]

                # 左边界左移，最左侧元素移出窗口；因为之前减去过1，所以移出时要再加回来。
                window[ord(s[left]) - ord('A')] += 1
                left += 1

        return result

    def is_sub(self, widow):
        """
        判断window是否包含子串
        :param widow:
        :return:
        """
        for item in widow:
            if item > 0:
                return False
        return True


# runtime:284 ms
# memory:15.5 MB
