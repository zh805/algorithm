
from typing import List


class Solution:
    # def permute(self, nums: List[int]) -> List[List[int]]:
    #     """
    #     方法1：内置itertools
    #     :param nums:
    #     :return:
    #     """
    #     from itertools import permutations
    #     return list(list(item) for item in permutations(nums))

    def permute(self, nums: List[int]) -> List[List[int]]:
        """
        方法2：
        :param nums:
        :return:
        """
        def permutations(iterable, r=None):
            pool = tuple(iterable)
            n = len(pool)
            r = n if r is None else r
            if r > n:
                return
            indices = list(range(n))
            cycles = list(range(n, n - r, -1))
            yield tuple(pool[i] for i in indices[:r])
            while n:
                for i in reversed(range(r)):
                    cycles[i] -= 1
                    if cycles[i] == 0:
                        indices[i:] = indices[i + 1:] + indices[i:i + 1]
                        cycles[i] = n - i
                    else:
                        j = cycles[i]
                        indices[i], indices[-j] = indices[-j], indices[i]
                        yield tuple(pool[i] for i in indices[:r])
                        break
                else:
                    return

        return list(list(item) for item in permutations(nums))



# runtime:48 ms
# memory:15.1 MB
