
from typing import List


class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        """
        方法1：二分查找
        观察数组规律，在只出现一次的元素的左侧，nums[0]==nums[1],nums[2]==nums[3],即nums[i]==nums[i^1]。
        ^ 异或：相同为0，不同为1。0/1,2/3,4/5, 与1异或可以相互转换。
        即：若nums[mid] == nums[mid^1],说明target在元素右侧，left=mid+1, 否则right=mid
        :param nums:
        :return:
        """
        left, right = 0, len(nums) - 1
        while left < right:
            mid = (left + right) // 2
            if nums[mid] == nums[mid ^ 1]:
                left = mid + 1
            else:
                right = mid
        return nums[left]



# runtime:48 ms
# memory:21.2 MB
