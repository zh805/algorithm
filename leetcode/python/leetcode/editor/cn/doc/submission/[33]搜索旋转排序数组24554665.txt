#
# @lc app=leetcode.cn id=33 lang=python3
#
# [33] 搜索旋转排序数组
#
# https://leetcode-cn.com/problems/search-in-rotated-sorted-array/description/
#
# algorithms
# Medium (36.13%)
# Likes:    306
# Dislikes: 0
# Total Accepted:    33.7K
# Total Submissions: 93.4K
# Testcase Example:  '[4,5,6,7,0,1,2]\n0'
#
# 假设按照升序排序的数组在预先未知的某个点上进行了旋转。
# 
# ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。
# 
# 搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。
# 
# 你可以假设数组中不存在重复的元素。
# 
# 你的算法时间复杂度必须是 O(log n) 级别。
# 
# 示例 1:
# 
# 输入: nums = [4,5,6,7,0,1,2], target = 0
# 输出: 4
# 
# 
# 示例 2:
# 
# 输入: nums = [4,5,6,7,0,1,2], target = 3
# 输出: -1
# 
#
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        
        # binary search
        # if start < mid, then left part is sorted
        # if mid < end, then right part is sorted
    
        ls = len(nums)
        if ls == 0:
            return -1
        l = 0
        r = ls - 1

        while l < r :
            # mid = l + (r - l + 1) // 2
            mid = (l + r + 1) >> 1
            if nums[mid] < nums[l]:
                if nums[mid] <= target <= nums[r]:
                    l  = mid 
                else:
                    r = mid - 1
            else:
                if nums[l] <= target < nums[mid]:
                    r = mid - 1
                else:
                    l = mid
        return l if nums[l] == target else -1

# runtime:64 ms
# memory:13.6 MB
