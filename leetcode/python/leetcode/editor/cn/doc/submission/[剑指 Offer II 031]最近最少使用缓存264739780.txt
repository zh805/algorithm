# class LRUCache:

#     def __init__(self, capacity: int):


#     def get(self, key: int) -> int:


#     def put(self, key: int, value: int) -> None:

# class Node:
#     """
#     双向链表节点
#     """
#     def __init__(self, key=None, value=None, pre_node=None, next_node=None):
#         self.key = key
#         self.value = value
#         self.pre_node = pre_node
#         self.next_node = next_node


# class LRUCache:
#     """
#     方法1：使用双向链表实现LRU,最新访问的数据放到链表尾（尾插法）；链表满时删除头节点。
#     """
#     def __init__(self, capacity: int):
#         self.capacity = capacity
#         # 字典存key和value，实现O（1）访问；键为key，值为node；
#         self.data = {}
#         self.head = Node(None, None, None, None)
#         self.tail = Node(None, None, None, None)
#         self.head.next_node = self.tail
#         self.tail.pre_node = self.head

#     def get(self, key: int) -> int:
#         """
#         根据key获取value
#         :param key:
#         :return:
#         """
#         if key in self.data:
#             node = self.data[key]
#             # 把node移动到链表头
#             self.move_to_tail(key)
#             return node.value
#         return -1

#     def put(self, key: int, value: int) -> None:
#         """
#         存入key和value
#         :param key:
#         :param value:
#         :return:
#         """
#         if key in self.data:
#             # 有则更新
#             node = self.data[key]
#             node.value = value
#             self.move_to_tail(key)
#         else:
#             # 无则加入
#             if len(self.data) == self.capacity:
#                 # 容量已满，需删除尾节点
#                 self.delete_the_first()
#             node = Node(key, value, self.tail.pre_node, self.tail)
#             self.tail.pre_node.next_node = node
#             self.tail.pre_node = node
#             self.data[key] = node

#     def move_to_tail(self, key: int) -> None:
#         """
#         把node移动到头节点
#         :param key:
#         :return:
#         """
#         node = self.data[key]

#         # 删除节点
#         node.pre_node.next_node = node.next_node
#         node.next_node.pre_node = node.pre_node

#         # 节点放到尾部
#         self.tail.pre_node.next_node = node
#         node.pre_node = self.tail.pre_node
#         node.next_node = self.tail
#         self.tail.pre_node = node

#     def delete_the_first(self) -> None:
#         """
#         删除最后一个节点
#         :return:
#         """
#         node = self.head.next_node
#         del self.data[node.key]

#         self.head.next_node = node.next_node
#         node.next_node.pre_node = self.head


from collections import OrderedDict


class LRUCache:
    """
    方法2：python内置数据结构OrderedDict（其内置的也为一个双向链表）
    """

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.data = OrderedDict()

    def get(self, key: int) -> int:
        if key in self.data:
            self.data.move_to_end(key)
            return self.data[key]
        return -1

    def put(self, key: int, value: int) -> None:
        if key in self.data:
            self.data[key] = value
            self.data.move_to_end(key)
        else:
            if len(self.data) == self.capacity:
                self.data.popitem(last=False)
            self.data[key] = value


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
# runtime:544 ms
# memory:69.5 MB
