# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    # def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
    #     """
    #     方法1：递归
    #     :param root:
    #     :return:
    #     """
    #     res = []
    #     if not root:
    #         return res
    #
    #     def postorder(node):
    #         if not node:
    #             return
    #         postorder(node.left)
    #         postorder(node.right)
    #         res.append(node.val)
    #
    #     postorder(root)
    #     return res

    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        """
        方法2：栈
        :param root:
        :return:
        """
        res = []
        if not root:
            return res

        stack = []
        prev = None
        while root or stack:
            while root:
                stack.append(root)
                root = root.left

            root = stack.pop()
            if not root.right or root.right == prev:
                res.append(root.val)
                prev = root
                root = None
            else:
                # 有右子树，则把父节点再次压入栈中
                stack.append(root)
                root = root.right
        return res


# runtime:36 ms
# memory:14.9 MB
