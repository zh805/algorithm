
from typing import List


class Solution:
    # def maxProduct(self, words: List[str]) -> int:
    #     """
    #     方法1：位运算
    #     :param words:
    #     :return:
    #     """
    #     length = len(words)
    #     print(words)
    #     word_codes = [self.translate(word) for word in words]
    #     print(word_codes)
    #     res = 0
    #     for i in range(length):
    #         for j in range(i + 1, length):
    #             if self.is_different(word_codes[i], word_codes[j]):
    #                 res = max(res, len(words[i]) * len(words[j]))
    #     return res
    #
    # def is_different(self, w1, w2):
    #     """
    #     w1和w2相与，不为0说明有重复字符，返回False
    #     :param w1:
    #     :param w2:
    #     :return:
    #     """
    #     return False if w1 & w2 else True
    #
    # def translate(self, word):
    #     """
    #     计算word的二进制表示
    #     :param word:
    #     :return:
    #     """
    #     res = 0
    #     for c in word:
    #         res |= 1 << (ord(c) - 97)
    #     return res

    def maxProduct(self, words: List[str]) -> int:
        """
        方法2：先去重，再用set取交集
        :param words:
        :return:
        """
        words = list(set(words))
        nums = len(words)
        res = 0
        if not nums:
            return res
        for i in range(nums):
            for j in range(i+1, nums):
                if not set(words[i]) & set(words[j]):
                    res = max(res, len(words[i]) * len(words[j]))
        return res


# runtime:2556 ms
# memory:15.4 MB
