# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

from collections import deque


class CBTInserter:

    def __init__(self, root: TreeNode):
        self.root = root
        # 队列保存缺少 左 或者 左右 子节点的叶子节点。
        self.q = deque()
        self.q.append(root)
        while self.q[0].left and self.q[0].right:
            node = self.q.popleft()
            if node.left:
                self.q.append(node.left)
            if node.right:
                self.q.append(node.right)

    def insert(self, v: int) -> int:
        insert_node = TreeNode(val=v)
        node = self.q[0]
        if not node.left:
            # 节点没有左右叶子节点，则插入节点为左叶子节点
            node.left = insert_node
        else:
            # 有左叶子节点，没有右叶子节点
            node.right = insert_node
            self.q.append(node.left)
            self.q.append(node.right)
            self.q.popleft()
        return node.val

    def get_root(self) -> TreeNode:
        return self.root

# Your CBTInserter object will be instantiated and called as such:
# obj = CBTInserter(root)
# param_1 = obj.insert(v)
# param_2 = obj.get_root()

# runtime:60 ms
# memory:15.9 MB
