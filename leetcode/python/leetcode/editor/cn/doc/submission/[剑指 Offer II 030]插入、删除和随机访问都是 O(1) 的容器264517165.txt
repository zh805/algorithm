class RandomizedSet:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        # 保存val与index的映射关系
        self._data = dict()
        # 保存val,用于随机获取元素
        self._assist = []

    def insert(self, val: int) -> bool:
        """
        Inserts a value to the set. Returns true if the set did not already contain the specified element.
        """
        if val not in self._data:
            index = len(self._data)
            self._data[val] = index
            self._assist.append(val)
            return True
        else:
            return False

    def remove(self, val: int) -> bool:
        """
        Removes a value from the set. Returns true if the set contained the specified element.
        """
        if val in self._assist:
            index = self._data[val]
            del self._data[val]

            if index != len(self._assist) - 1:
                # 删除的元素不在列表末尾
                # 把需要删除的元素移到尾部，然后删除
                self._assist[index], self._assist[-1] = self._assist[-1], self._assist[index]
                # 更新交换位置的元素
                self._data[self._assist[index]] = index
            self._assist.pop()
            return True
        else:
            return False

    def getRandom(self) -> int:
        """
        Get a random element from the set.
        """
        import random
        return random.choice(self._assist)


# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()

# runtime:500 ms
# memory:50 MB
