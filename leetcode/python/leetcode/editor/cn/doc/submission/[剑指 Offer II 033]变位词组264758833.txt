
from typing import List


class Solution:
    # def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
    #     """
    #     方法1：使用Counter统计字符频次，找出变位词。
    #     :param strs:
    #     :return:
    #     """
    #     from collections import Counter, defaultdict
    #     d = defaultdict(list)
    #     for s in strs:
    #         s_c = Counter(s)
    #         key = ''.join(sorted(s_c.elements()))
    #         print(key)
    #         d[key].append(s)
    #     result = [v for _, v in d.items()]
    #     return result

    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        """
        方法2：哈希
        :param strs:
        :return:
        """
        # d = {}
        # for s in strs:
        #     s_s = ''.join(sorted(s))
        #     if s_s not in d:
        #         d[s_s] = [s]
        #     else:
        #         d[s_s].append(s)
        # result = [v for _, v in d.items()]
        # return result

        from collections import defaultdict
        d = defaultdict(list)
        for s in strs:
            s_s = ''.join(sorted(s))
            d[s_s].append(s)
        return list(d.values())

    # def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
    #     """
    #     方法3：哈希，方法2改进
    #     :param strs:
    #     :return:
    #     """
    #     result = []
    #     d = {}
    #     for s in strs:
    #         s_s = ''.join(sorted(s))
    #         if s_s not in d:
    #             d[s_s] = len(d)
    #             result.append([s])
    #         else:
    #             index = d[s_s]
    #             result[index].append(s)
    #     return result


# runtime:56 ms
# memory:18.1 MB
